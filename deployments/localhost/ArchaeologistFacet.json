{
  "address": "0xEc317b1B20D1385Ca8F9CD5fb671cD4189e4342e",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "archaeologist",
          "type": "address"
        }
      ],
      "name": "ArchaeologistAlreadyUnwrapped",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "archaeologist",
          "type": "address"
        }
      ],
      "name": "ArchaeologistNotOnSarcophagus",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "cursedBond",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "NotEnoughCursedBond",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "freeBond",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "NotEnoughFreeBond",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "NotEnoughReward",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "resurrectionTime",
          "type": "uint256"
        }
      ],
      "name": "ResurrectionTimeInPast",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "sarcoId",
          "type": "bytes32"
        }
      ],
      "name": "SarcophagusDoesNotExist",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "sarcoId",
          "type": "bytes32"
        }
      ],
      "name": "SarcophagusNotFinalized",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "sarcoId",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "signer",
          "type": "address"
        }
      ],
      "name": "SignerNotArchaeologistOnSarcophagus",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "resurrectionTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "currentTime",
          "type": "uint256"
        }
      ],
      "name": "TooEarlyToUnwrap",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "resurrectionTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "resurrectionWindow",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "currentTime",
          "type": "uint256"
        }
      ],
      "name": "TooLateToUnwrap",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "unencryptedShard",
          "type": "bytes"
        },
        {
          "internalType": "bytes32",
          "name": "doubleHashedShard",
          "type": "bytes32"
        }
      ],
      "name": "UnencryptedShardHashMismatch",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "archaeologist",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "depositedBond",
          "type": "uint256"
        }
      ],
      "name": "DepositFreeBond",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "sarcoId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "arweaveTxId",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldArchaeologist",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newArchaeologist",
          "type": "address"
        }
      ],
      "name": "FinalizeTransfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "sarcoId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "unencryptedShard",
          "type": "bytes"
        }
      ],
      "name": "UnwrapSarcophagus",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "archaeologist",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "withdrawnBond",
          "type": "uint256"
        }
      ],
      "name": "WithdrawFreeBond",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "archaeologist",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "withdrawnReward",
          "type": "uint256"
        }
      ],
      "name": "WithdrawReward",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "depositFreeBond",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "sarcoId",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "arweaveTxId",
          "type": "string"
        },
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct LibTypes.Signature",
          "name": "oldArchSignature",
          "type": "tuple"
        }
      ],
      "name": "finalizeTransfer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "sarcoId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "unencryptedShard",
          "type": "bytes"
        }
      ],
      "name": "unwrapSarcophagus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawFreeBond",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "793ef83fc5e518f201a0300ed474fb2d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"archaeologist\",\"type\":\"address\"}],\"name\":\"ArchaeologistAlreadyUnwrapped\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"archaeologist\",\"type\":\"address\"}],\"name\":\"ArchaeologistNotOnSarcophagus\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cursedBond\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"NotEnoughCursedBond\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"freeBond\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"NotEnoughFreeBond\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"NotEnoughReward\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"resurrectionTime\",\"type\":\"uint256\"}],\"name\":\"ResurrectionTimeInPast\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"sarcoId\",\"type\":\"bytes32\"}],\"name\":\"SarcophagusDoesNotExist\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"sarcoId\",\"type\":\"bytes32\"}],\"name\":\"SarcophagusNotFinalized\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"sarcoId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"}],\"name\":\"SignerNotArchaeologistOnSarcophagus\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"resurrectionTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentTime\",\"type\":\"uint256\"}],\"name\":\"TooEarlyToUnwrap\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"resurrectionTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"resurrectionWindow\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentTime\",\"type\":\"uint256\"}],\"name\":\"TooLateToUnwrap\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"unencryptedShard\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"doubleHashedShard\",\"type\":\"bytes32\"}],\"name\":\"UnencryptedShardHashMismatch\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"archaeologist\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"depositedBond\",\"type\":\"uint256\"}],\"name\":\"DepositFreeBond\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"sarcoId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"arweaveTxId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldArchaeologist\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newArchaeologist\",\"type\":\"address\"}],\"name\":\"FinalizeTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"sarcoId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"unencryptedShard\",\"type\":\"bytes\"}],\"name\":\"UnwrapSarcophagus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"archaeologist\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"withdrawnBond\",\"type\":\"uint256\"}],\"name\":\"WithdrawFreeBond\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"archaeologist\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"withdrawnReward\",\"type\":\"uint256\"}],\"name\":\"WithdrawReward\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositFreeBond\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"sarcoId\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"arweaveTxId\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct LibTypes.Signature\",\"name\":\"oldArchSignature\",\"type\":\"tuple\"}],\"name\":\"finalizeTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"sarcoId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"unencryptedShard\",\"type\":\"bytes\"}],\"name\":\"unwrapSarcophagus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawFreeBond\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"depositFreeBond(uint256)\":{\"params\":{\"amount\":\"The amount to deposit\"}},\"finalizeTransfer(bytes32,string,(uint8,bytes32,bytes32))\":{\"params\":{\"arweaveTxId\":\"The id of the arweave transaction where the new shard\",\"oldArchSignature\":\"The signature of the old archaeologist was uploaded\",\"sarcoId\":\"The identifier of the sarcophagus\"}},\"unwrapSarcophagus(bytes32,bytes)\":{\"details\":\"Verifies that the unencrypted shard matches the hashedShard stored on chain and pays the archaeologist.\",\"params\":{\"sarcoId\":\"The identifier of the sarcophagus to unwrap\",\"unencryptedShard\":\"The archaeologist's corresponding unencrypted shard\"}},\"withdrawFreeBond(uint256)\":{\"params\":{\"amount\":\"The amount to withdraw\"}},\"withdrawReward(uint256)\":{\"params\":{\"amount\":\"The amount to withdraw\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"depositFreeBond(uint256)\":{\"notice\":\"Deposits an archaeologist's free bond to the contract.\"},\"finalizeTransfer(bytes32,string,(uint8,bytes32,bytes32))\":{\"notice\":\"Finalizes a transfer of roles and responsibilities between two archaeologists. This is to be called by the new archaeologist.\"},\"unwrapSarcophagus(bytes32,bytes)\":{\"notice\":\"Unwraps the sarcophagus.\"},\"withdrawFreeBond(uint256)\":{\"notice\":\"Withdraws an archaeologist's free bond from the contract.\"},\"withdrawReward(uint256)\":{\"notice\":\"Withdraws froms an archaeologist's reward pool\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/facets/ArchaeologistFacet.sol\":\"ArchaeologistFacet\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"contracts/facets/ArchaeologistFacet.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../libraries/LibTypes.sol\\\";\\nimport {LibUtils} from \\\"../libraries/LibUtils.sol\\\";\\nimport {LibErrors} from \\\"../libraries/LibErrors.sol\\\";\\nimport {LibBonds} from \\\"../libraries/LibBonds.sol\\\";\\nimport {LibRewards} from \\\"../libraries/LibRewards.sol\\\";\\nimport {AppStorage} from \\\"../storage/LibAppStorage.sol\\\";\\n\\ncontract ArchaeologistFacet {\\n    AppStorage internal s;\\n\\n    event FinalizeTransfer(\\n        bytes32 sarcoId,\\n        string arweaveTxId,\\n        address oldArchaeologist,\\n        address newArchaeologist\\n    );\\n\\n    event UnwrapSarcophagus(bytes32 indexed sarcoId, bytes unencryptedShard);\\n\\n    event DepositFreeBond(address indexed archaeologist, uint256 depositedBond);\\n\\n    event WithdrawFreeBond(\\n        address indexed archaeologist,\\n        uint256 withdrawnBond\\n    );\\n\\n    event WithdrawReward(\\n        address indexed archaeologist,\\n        uint256 withdrawnReward\\n    );\\n\\n    /// @notice Deposits an archaeologist's free bond to the contract.\\n    /// @param amount The amount to deposit\\n    function depositFreeBond(uint256 amount) external {\\n        // Increase the archaeolgist's free bond in app storage\\n        LibBonds.increaseFreeBond(msg.sender, amount);\\n\\n        // Transfer the amount of sarcoToken from the archaeologist to the contract\\n        s.sarcoToken.transferFrom(msg.sender, address(this), amount);\\n\\n        // Emit an event\\n        emit DepositFreeBond(msg.sender, amount);\\n    }\\n\\n    /// @notice Withdraws an archaeologist's free bond from the contract.\\n    /// @param amount The amount to withdraw\\n    function withdrawFreeBond(uint256 amount) external {\\n        // Decrease the archaeologist's free bond amount.\\n        // Reverts if there is not enough free bond on the contract.\\n        LibBonds.decreaseFreeBond(msg.sender, amount);\\n\\n        // Transfer the amount of sarcoToken to the archaeologist\\n        s.sarcoToken.transfer(msg.sender, amount);\\n\\n        // Emit an event\\n        emit WithdrawFreeBond(msg.sender, amount);\\n    }\\n\\n    /// @notice Withdraws froms an archaeologist's reward pool\\n    /// @param amount The amount to withdraw\\n    function withdrawReward(uint256 amount) external {\\n        LibRewards.decreaseRewardPool(msg.sender, amount);\\n\\n        // Transfer the amount of sarcoToken to the archaeologist\\n        s.sarcoToken.transfer(msg.sender, amount);\\n\\n        emit WithdrawReward(msg.sender, amount);\\n    }\\n\\n    /// @notice Unwraps the sarcophagus.\\n    /// @dev Verifies that the unencrypted shard matches the hashedShard stored\\n    /// on chain and pays the archaeologist.\\n    /// @param sarcoId The identifier of the sarcophagus to unwrap\\n    /// @param unencryptedShard The archaeologist's corresponding unencrypted shard\\n    function unwrapSarcophagus(bytes32 sarcoId, bytes memory unencryptedShard)\\n        external\\n    {\\n        // Confirm that the archaeologist has not already unwrapped by checking\\n        // if the unencryptedShard is empty\\n        LibUtils.archaeologistUnwrappedCheck(sarcoId, msg.sender);\\n\\n        // Confirm that the sarcophagus exists\\n        if (s.sarcophagi[sarcoId].state != LibTypes.SarcophagusState.Exists) {\\n            revert LibErrors.SarcophagusDoesNotExist(sarcoId);\\n        }\\n\\n        // Confirm that the sender is an archaeologist on this sarcophagus\\n        if (!LibUtils.archaeologistExistsOnSarc(sarcoId, msg.sender)) {\\n            revert LibErrors.ArchaeologistNotOnSarcophagus(msg.sender);\\n        }\\n\\n        // Confirm that the resurrection time has passed and that the\\n        // resurrection window has not passed\\n        LibUtils.unwrapTime(s.sarcophagi[sarcoId].resurrectionTime);\\n\\n        // Comfirm that the sarcophagus has been finalized\\n        if (!LibUtils.isSarcophagusFinalized(sarcoId)) {\\n            revert LibErrors.SarcophagusNotFinalized(sarcoId);\\n        }\\n\\n        // Get the archaeologist's data from storage\\n        LibTypes.ArchaeologistStorage memory archaeologistData = LibUtils\\n            .getArchaeologist(sarcoId, msg.sender);\\n\\n        // Confirm that the double hash of the unencrypted shard matches the hashedShard in storage\\n        bytes32 doubleHash = keccak256(abi.encode(keccak256(unencryptedShard)));\\n        if (doubleHash != archaeologistData.doubleHashedShard) {\\n            revert LibErrors.UnencryptedShardHashMismatch(\\n                unencryptedShard,\\n                archaeologistData.doubleHashedShard\\n            );\\n        }\\n\\n        // Store the unencrypted shard in on the archaeologist object in the sarcophagus\\n        s\\n        .sarcophagusArchaeologists[sarcoId][msg.sender]\\n            .unencryptedShard = unencryptedShard;\\n\\n        // Free the archaeologist's cursed bond\\n        LibBonds.freeArchaeologist(sarcoId, msg.sender);\\n\\n        // Save the successful sarcophagus against the archaeologist\\n        s.archaeologistSuccesses[msg.sender][sarcoId] = true;\\n\\n        // Transfer the bounty and digging fee to the archaeologist's reward pool\\n        LibRewards.increaseRewardPool(\\n            msg.sender,\\n            archaeologistData.bounty + archaeologistData.diggingFee\\n        );\\n\\n        // Emit an event\\n        emit UnwrapSarcophagus(sarcoId, unencryptedShard);\\n    }\\n\\n    /// @notice Finalizes a transfer of roles and responsibilities between two\\n    /// archaeologists. This is to be called by the new archaeologist.\\n    /// @param sarcoId The identifier of the sarcophagus\\n    /// @param arweaveTxId The id of the arweave transaction where the new shard\\n    /// @param oldArchSignature The signature of the old archaeologist\\n    /// was uploaded\\n    function finalizeTransfer(\\n        bytes32 sarcoId,\\n        string memory arweaveTxId,\\n        LibTypes.Signature memory oldArchSignature\\n    ) external {\\n        // Confirm that the sarcophagus exists\\n        if (s.sarcophagi[sarcoId].state != LibTypes.SarcophagusState.Exists) {\\n            revert LibErrors.SarcophagusDoesNotExist(sarcoId);\\n        }\\n\\n        // Confirm that the sarcophagus has been finalized\\n        if (!LibUtils.isSarcophagusFinalized(sarcoId)) {\\n            revert LibErrors.SarcophagusNotFinalized(sarcoId);\\n        }\\n\\n        // Confirm that the resurrection time is in the future\\n        LibUtils.resurrectionInFuture(s.sarcophagi[sarcoId].resurrectionTime);\\n\\n        // Get the address that signed the oldArchSignature\\n        address oldArchaeologist = LibUtils.recoverAddress(\\n            bytes(arweaveTxId),\\n            oldArchSignature.v,\\n            oldArchSignature.r,\\n            oldArchSignature.s\\n        );\\n\\n        // Confirm that the oldArchaeologist is an archaeologist on this\\n        // sarcophagus. Failure here means that someone besides an archaeologist\\n        // on the sarcophagus signed this message or that the data being signed\\n        // was not the provided arweaveTxId.\\n        if (!LibUtils.archaeologistExistsOnSarc(sarcoId, oldArchaeologist)) {\\n            revert LibErrors.SignerNotArchaeologistOnSarcophagus(\\n                sarcoId,\\n                oldArchaeologist\\n            );\\n        }\\n\\n        // Update the list of archaeologist's on the sarcophagus\\n        // For each archaeologist on the sarcophagus, find the old archaeologist\\n        // and replace it with the sender's address.\\n        for (\\n            uint256 i = 0;\\n            i < s.sarcophagi[sarcoId].archaeologists.length;\\n            i++\\n        ) {\\n            // Find the archaeologist that matches the old archaeologist's address\\n            if (s.sarcophagi[sarcoId].archaeologists[i] == oldArchaeologist) {\\n                s.sarcophagi[sarcoId].archaeologists[i] = msg.sender;\\n\\n                // Once found there is no need to continue\\n                break;\\n            }\\n        }\\n\\n        // Free the old archaeologist's bond\\n        LibBonds.freeArchaeologist(sarcoId, oldArchaeologist);\\n\\n        LibTypes.ArchaeologistStorage storage newArchData = s\\n            .sarcophagusArchaeologists[sarcoId][msg.sender];\\n\\n        LibTypes.ArchaeologistStorage storage oldArchData = s\\n            .sarcophagusArchaeologists[sarcoId][oldArchaeologist];\\n\\n        // Add the new archaeologist's address to the sarcohpagusArchaeologists mapping\\n        newArchData.diggingFee = oldArchData.diggingFee;\\n        newArchData.bounty = oldArchData.bounty;\\n        newArchData.doubleHashedShard = oldArchData.doubleHashedShard;\\n        newArchData.unencryptedShard = \\\"\\\";\\n\\n        // Set the old archaeologist's data in the sarcophagusArchaeologists\\n        // mapping to their default values\\n        oldArchData.diggingFee = 0;\\n        oldArchData.bounty = 0;\\n        oldArchData.doubleHashedShard = 0;\\n        oldArchData.unencryptedShard = \\\"\\\";\\n\\n        // Add the arweave transaction id to arweaveTxIds on the sarcophagus\\n        s.sarcophagi[sarcoId].arweaveTxIds.push(arweaveTxId);\\n\\n        // Curse the new archaeologist's bond\\n        LibBonds.curseArchaeologist(sarcoId, msg.sender);\\n\\n        // Emit an event\\n        emit FinalizeTransfer(\\n            sarcoId,\\n            arweaveTxId,\\n            oldArchaeologist,\\n            msg.sender\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x54e4f865339057ec16a09632de0bd36782758371ff78cdfaf0e8dbfba0eee0e0\",\"license\":\"Unlicense\"},\"contracts/libraries/LibBonds.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.13;\\n\\nimport \\\"../storage/LibAppStorage.sol\\\";\\nimport \\\"../libraries/LibTypes.sol\\\";\\nimport {LibErrors} from \\\"../libraries/LibErrors.sol\\\";\\n\\nlibrary LibBonds {\\n    /// @notice Calculates the cursed bond that an archaeologist needs to lock\\n    /// up\\n    /// @dev The cursed bond amount is the sum of the digging fee and the\\n    /// bounty.\\n    /// @param diggingFee The digging fee of the sarcophagus\\n    /// @param bounty The bounty of the sarcophagus\\n    /// @return The amount of cursed bond\\n    function calculateCursedBond(uint256 diggingFee, uint256 bounty)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        // TODO: Implement a better algorithm for calculating the cursed bond\\n        return diggingFee + bounty;\\n    }\\n\\n    /// @notice Decreases the amount stored in the freeBond mapping for an\\n    /// archaeologist. Reverts if the archaeologist's free bond is lower than\\n    /// the amount.\\n    /// @param archaeologist The address of the archaeologist whose\\n    /// free bond is being decreased\\n    /// @param amount The amount to decrease the free bond by\\n    function decreaseFreeBond(address archaeologist, uint256 amount) internal {\\n        AppStorage storage s = LibAppStorage.getAppStorage();\\n\\n        // Revert if the amount is greater than the current free bond\\n        if (amount > s.freeBonds[archaeologist]) {\\n            revert LibErrors.NotEnoughFreeBond(\\n                s.freeBonds[archaeologist],\\n                amount\\n            );\\n        }\\n\\n        // Decrease the free bond amount\\n        s.freeBonds[archaeologist] -= amount;\\n    }\\n\\n    /// @notice Increases the amount stored in the freeBond mapping for an\\n    /// archaeologist.\\n    /// @param archaeologist The address of the archaeologist whose\\n    /// free bond is being decreased\\n    /// @param amount The amount to decrease the free bond by\\n    function increaseFreeBond(address archaeologist, uint256 amount) internal {\\n        AppStorage storage s = LibAppStorage.getAppStorage();\\n\\n        // Increase the free bond amount\\n        s.freeBonds[archaeologist] += amount;\\n    }\\n\\n    /// @notice Decreases the amount stored in the cursedBond mapping for an\\n    /// archaeologist. Reverts if the archaeologist's cursed bond is lower than\\n    /// the amount.\\n    /// @param archaeologist The address of the archaeologist whose\\n    /// cursed bond is being decreased\\n    /// @param amount The amount to decrease the cursed bond by\\n    function decreaseCursedBond(address archaeologist, uint256 amount)\\n        internal\\n    {\\n        AppStorage storage s = LibAppStorage.getAppStorage();\\n\\n        // Revert if the amount is greater than the current cursed bond\\n        if (amount > s.cursedBonds[archaeologist]) {\\n            revert LibErrors.NotEnoughCursedBond(\\n                s.cursedBonds[archaeologist],\\n                amount\\n            );\\n        }\\n\\n        // Decrease the cursed bond amount\\n        s.cursedBonds[archaeologist] -= amount;\\n    }\\n\\n    /// @notice Increases the amount stored in the cursedBond mapping for an\\n    /// archaeologist.\\n    /// @param archaeologist The address of the archaeologist whose\\n    /// cursed bond is being decreased\\n    /// @param amount The amount to decrease the cursed bond by\\n    function increaseCursedBond(address archaeologist, uint256 amount)\\n        internal\\n    {\\n        AppStorage storage s = LibAppStorage.getAppStorage();\\n\\n        // Increase the cursed bond amount\\n        s.cursedBonds[archaeologist] += amount;\\n    }\\n\\n    /// @notice Locks up the archaeologist's bond, decreasing the\\n    /// archaeologist's free bond by an amount and increasing the\\n    /// archaeologist's cursed bond by the same amount.\\n    /// @param archaeologist The address of the archaeologist\\n    /// @param amount The amount to lock up\\n    function lockUpBond(address archaeologist, uint256 amount) internal {\\n        // Decrease the free bond amount\\n        decreaseFreeBond(archaeologist, amount);\\n\\n        // Increase the cursed bond amount\\n        increaseCursedBond(archaeologist, amount);\\n    }\\n\\n    /// @notice Unlocks the archaeologist's bond, increasing the\\n    /// archaeologist's free bond by an amount and decreasing the\\n    /// archaeologist's cursed bond by the same amount.\\n    /// @param archaeologist The address of the archaeologist\\n    /// @param amount The amount to unlock\\n    function unlockBond(address archaeologist, uint256 amount) internal {\\n        // Decrease the cursed bond amount\\n        decreaseCursedBond(archaeologist, amount);\\n\\n        // Increase the free bond amount\\n        increaseFreeBond(archaeologist, amount);\\n    }\\n\\n    /// @notice Given an array of archaeologists on a sarcophagus, sums the total of\\n    /// 1. Each archaeologists' bounty\\n    /// 2. Each archaeologists' digging fees\\n    /// 3. The storage fee\\n    /// @param sarcoId The identifier of the sarcophagus\\n    /// @param archaeologists The array of archaeologists' addresses\\n    /// @return the total of the above\\n    function calculateTotalFees(\\n        bytes32 sarcoId,\\n        address[] memory archaeologists\\n    ) internal view returns (uint256) {\\n        AppStorage storage s = LibAppStorage.getAppStorage();\\n\\n        uint256 totalFees = 0;\\n\\n        // iterate through each archaeologist\\n        for (uint256 i = 0; i < archaeologists.length; i++) {\\n            LibTypes.ArchaeologistStorage memory archaeologistsData = s\\n                .sarcophagusArchaeologists[sarcoId][archaeologists[i]];\\n\\n            // add the archaeologist's bounty to the total fees\\n            totalFees += archaeologistsData.bounty;\\n\\n            // add the archaeologist's digging fee to the total fees\\n            totalFees += archaeologistsData.diggingFee;\\n        }\\n\\n        // add the storage fee to the total fees\\n        totalFees += s.sarcophagi[sarcoId].storageFee;\\n\\n        // return the total fees\\n        return totalFees;\\n    }\\n\\n    /// @notice Calculates an archaeologist's cursed bond and curses them (locks\\n    /// up the free bond).\\n    /// @param sarcoId the identifier of the sarcophagus to bond the archaeologist with\\n    /// @param archaeologist the address of the archaeologist to curse\\n    function curseArchaeologist(bytes32 sarcoId, address archaeologist)\\n        internal\\n    {\\n        AppStorage storage s = LibAppStorage.getAppStorage();\\n\\n        // Get the archaeologist's data from storage\\n        LibTypes.ArchaeologistStorage memory archaeologistData = s\\n            .sarcophagusArchaeologists[sarcoId][archaeologist];\\n\\n        // Calculate the amount of cursed bond the archaeologists needs to lock up\\n        uint256 cursedBondAmount = calculateCursedBond(\\n            archaeologistData.diggingFee,\\n            archaeologistData.bounty\\n        );\\n\\n        // Lock up the archaeologist's bond by the cursed bond amount\\n        lockUpBond(archaeologist, cursedBondAmount);\\n    }\\n\\n    /// @notice Calculates an archaeologist's cursed bond and frees them\\n    /// (unlocks the cursed bond).\\n    /// @param sarcoId the identifier of the sarcophagus to free the archaologist from\\n    /// @param archaeologist the address of the archaeologist to free\\n    function freeArchaeologist(bytes32 sarcoId, address archaeologist)\\n        internal\\n    {\\n        AppStorage storage s = LibAppStorage.getAppStorage();\\n\\n        // Get the archaeologist's data from storage\\n        LibTypes.ArchaeologistStorage memory archaeologistData = s\\n            .sarcophagusArchaeologists[sarcoId][archaeologist];\\n\\n        // Calculate the amount of cursed bond the archaeologists needs to lock up\\n        uint256 cursedBondAmount = calculateCursedBond(\\n            archaeologistData.diggingFee,\\n            archaeologistData.bounty\\n        );\\n\\n        // Lock up the archaeologist's bond by the cursed bond amount\\n        unlockBond(archaeologist, cursedBondAmount);\\n    }\\n}\\n\",\"keccak256\":\"0xc9ad2a70beabd70e04375e8c497f5ea9461250a4ef00c025a39d09e7f7eba06d\",\"license\":\"Unlicense\"},\"contracts/libraries/LibErrors.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.13;\\n\\n/**\\n * @title A collection of Errors\\n * @notice This library defines all of the Errors that the Sarcophagus system\\n * uses.\\n */\\nlibrary LibErrors {\\n    error ArchaeologistAlreadyUnwrapped(address archaeologist);\\n\\n    error ArchaeologistListNotUnique(address[] archaeologists);\\n\\n    error ArchaeologistNotOnSarcophagus(address archaeologist);\\n\\n    error ArweaveArchaeologistNotInList();\\n\\n    error ArweaveTxIdEmpty();\\n\\n    error IncorrectNumberOfArchaeologistSignatures(uint256 signaturesLength);\\n\\n    error MinShardsGreaterThanArchaeologists(uint8 minShards);\\n\\n    error MinShardsZero();\\n\\n    error MaxResurrectionIntervalIsZero();\\n\\n    error NewResurrectionTimeInPast(uint256 newResurrectionTime);\\n\\n    error NewResurrectionTimeTooLarge(uint256 newResurrectionTime);\\n\\n    error NoArchaeologistsProvided();\\n\\n    error NotEnoughCursedBond(uint256 cursedBond, uint256 amount);\\n\\n    error NotEnoughFreeBond(uint256 freeBond, uint256 amount);\\n\\n    error NotEnoughReward(uint256 reward, uint256 amount);\\n\\n    error ResurrectionTimeInPast(uint256 resurrectionTime);\\n\\n    error SarcophagusAlreadyExists(bytes32 sarcoId);\\n\\n    error SarcophagusAlreadyFinalized(bytes32 sarcoId);\\n\\n    error SarcophagusNotFinalized(bytes32 sarcoId);\\n\\n    error SarcophagusDoesNotExist(bytes32 sarcoId);\\n\\n    error SenderNotEmbalmer(address sender, address embalmer);\\n\\n    error SignatureFromWrongAccount(\\n        address hopefulAddress,\\n        address actualAddress\\n    );\\n\\n    error SignatureListNotUnique();\\n\\n    error SignerNotArchaeologistOnSarcophagus(bytes32 sarcoId, address signer);\\n\\n    // Used when an attempt is made to accuse or rewrap after the resurrection time has already passed (so it's actually time to unwrap it)\\n    error SarcophagusIsUnwrappable();\\n\\n    // Used when an attempt is made to clean a sarcophagus that has not exceeded its resurrection window\\n    error SarcophagusNotCleanable();\\n\\n    // Used when accusing with not enough, or invalid, unencrypted shard(s)\\n    error NotEnoughProof();\\n\\n    error TooEarlyToUnwrap(uint256 resurrectionTime, uint256 currentTime);\\n\\n    error TooLateToUnwrap(\\n        uint256 resurrectionTime,\\n        uint256 resurrectionWindow,\\n        uint256 currentTime\\n    );\\n\\n    error UnencryptedShardHashMismatch(\\n        bytes unencryptedShard,\\n        bytes32 doubleHashedShard\\n    );\\n}\\n\",\"keccak256\":\"0x0597f3bebdcc132d73108b89f1e425a8ec9c5da54ae40114caa0823153fd63d7\",\"license\":\"Unlicense\"},\"contracts/libraries/LibRewards.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.13;\\n\\nimport \\\"../storage/LibAppStorage.sol\\\";\\nimport \\\"../libraries/LibTypes.sol\\\";\\nimport {LibErrors} from \\\"../libraries/LibErrors.sol\\\";\\n\\nlibrary LibRewards {\\n    /// @notice Decreases the amount stored in the archaeologistRewards mapping for an\\n    /// archaeologist. Reverts if the archaeologist's reward is lower than\\n    /// the amount. Called on reward withdraw.\\n    /// @param archaeologist The address of the archaeologist whose\\n    /// reward is being decreased\\n    /// @param amount The amount to decrease the reward by\\n    function decreaseRewardPool(address archaeologist, uint256 amount)\\n        internal\\n    {\\n        AppStorage storage s = LibAppStorage.getAppStorage();\\n\\n        // Revert if the amount is greater than the current reward\\n        if (amount > s.archaeologistRewards[archaeologist]) {\\n            revert LibErrors.NotEnoughReward(\\n                s.archaeologistRewards[archaeologist],\\n                amount\\n            );\\n        }\\n\\n        // Decrease the rewards amount\\n        s.archaeologistRewards[archaeologist] -= amount;\\n    }\\n\\n    /// @notice Increases the amount stored in the archaeologistRewards mapping for an\\n    /// archaeologist.\\n    /// @param amount The amount to increase the reward by\\n    /// @param archaeologist The address of the archaeologist whose\\n    /// reward is being increased\\n    function increaseRewardPool(address archaeologist, uint256 amount)\\n        internal\\n    {\\n        AppStorage storage s = LibAppStorage.getAppStorage();\\n\\n        s.archaeologistRewards[archaeologist] += amount;\\n    }\\n}\\n\",\"keccak256\":\"0x79143f99f9755ba51a7d3a4443354275b6d66fd872410aa636b4c5467cb4d835\",\"license\":\"Unlicense\"},\"contracts/libraries/LibTypes.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.13;\\n\\n/**\\n * @title A collection of defined structs\\n * @notice This library defines the various data models that the Sarcophagus\\n * system uses\\n */\\nlibrary LibTypes {\\n    // DoesNotExist must come first on the list to be the default value\\n    enum SarcophagusState {\\n        DoesNotExist,\\n        Exists,\\n        Done\\n    }\\n\\n    // A struct of just the signature. This is used primarily by the\\n    // finalizeSarcpohagus function for the arweave archaeologist. Note that,\\n    // unlike the regular archaeologists, the sarcophagus already stores the\\n    // single arweave archaeologist's address so there is no need to pass in the\\n    // address to the finalizeSarcophagus function.\\n    struct Signature {\\n        uint8 v;\\n        bytes32 r;\\n        bytes32 s;\\n    }\\n\\n    // Signature struct created to make passing in the signature argmuments into\\n    // finalizedSarcophagus easier and to avoid the \\\"stack too deep\\\" error.\\n    // Also attaching arachaeologist addresses so we can tie the signature back\\n    // to the address in finalizeSarcophagus.\\n    struct SignatureWithAccount {\\n        address account;\\n        uint8 v;\\n        bytes32 r;\\n        bytes32 s;\\n    }\\n\\n    // ArchaeologistMemory is the struct that is passed into the\\n    // initializeSarcophagus function. Even though we don't need each storage\\n    // fee of the archaeologist, the storage fee is included in the struct to\\n    // reduce the stack size within the function, preventing the \\\"stack too\\n    // deep\\\" error.\\n    struct ArchaeologistMemory {\\n        address archAddress;\\n        uint256 storageFee;\\n        uint256 diggingFee;\\n        uint256 bounty;\\n        bytes32 hashedShard;\\n    }\\n\\n    // ArchaeologistStorage is the struct that is stored in AppStorage under the\\n    // sarcophagusArchaeologists mapping.\\n    //\\n    // The archaeologist address is left out since each archaeologist's address\\n    // is stored on the sarcophagus object as an array.\\n    //\\n    // The storage fee is left out becuase we only need to store the storage fee\\n    // of the archaeologist uploading to arweave, which will be stored directly\\n    // on the sarcophagus.\\n    struct ArchaeologistStorage {\\n        uint256 diggingFee;\\n        uint256 bounty;\\n        bytes32 doubleHashedShard;\\n        bytes unencryptedShard;\\n    }\\n\\n    // The ArchaeologistStorage struct could be contained in this Sarcophagus\\n    // struct as a mapping, but it was put into it's own mapping\\n    // (sarcophagusArchaeologists) directly in AppStorage. Instead the\\n    // sarcophagus stores the addresses of each archaeologist added to it. This\\n    // was done to simplify the creation of a sarcophagus object in\\n    // initializeSarcophagus.\\n    struct Sarcophagus {\\n        string name;\\n        SarcophagusState state;\\n        bool canBeTransferred;\\n        uint8 minShards;\\n        uint256 resurrectionTime;\\n        uint256 maxResurrectionInterval;\\n        string[] arweaveTxIds;\\n        uint256 storageFee;\\n        address embalmer;\\n        address recipientAddress;\\n        address arweaveArchaeologist;\\n        address[] archaeologists;\\n    }\\n}\\n\",\"keccak256\":\"0x270a916e9f4b256a37342be7aab10069346fbb93a5954a94a2ab509e3a918274\",\"license\":\"Unlicense\"},\"contracts/libraries/LibUtils.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.13;\\n\\nimport \\\"../storage/LibAppStorage.sol\\\";\\nimport \\\"../libraries/LibTypes.sol\\\";\\nimport {LibErrors} from \\\"../libraries/LibErrors.sol\\\";\\n\\n/**\\n * @title Utility functions used within the Sarcophagus system\\n * @notice This library implements various functions that are used throughout\\n * Sarcophagus, mainly to DRY up the codebase\\n * @dev these functions are all stateless, public, pure/view\\n */\\nlibrary LibUtils {\\n    /**\\n     * @notice Reverts if the public key length is not exactly 64 bytes long\\n     * @param publicKey the key to check length of\\n     */\\n    function publicKeyLength(bytes memory publicKey) public pure {\\n        require(publicKey.length == 64, \\\"public key must be 64 bytes\\\");\\n    }\\n\\n    /**\\n     * @notice Reverts if the hash of singleHash does not equal doubleHash\\n     * @param doubleHash the hash to compare hash of singleHash to\\n     * @param singleHash the value to hash and compare against doubleHash\\n     */\\n    function hashCheck(bytes32 doubleHash, bytes memory singleHash)\\n        public\\n        pure\\n    {\\n        require(doubleHash == keccak256(singleHash), \\\"hashes do not match\\\");\\n    }\\n\\n    /**\\n     * @notice Reverts if the input string is not empty\\n     * @param assetId the string to check\\n     */\\n    function confirmAssetIdNotSet(string memory assetId) public pure {\\n        require(bytes(assetId).length == 0, \\\"assetId has already been set\\\");\\n    }\\n\\n    /**\\n     * @notice Reverts if existing assetId is not empty, or if new assetId is\\n     * @param existingAssetId the orignal assetId to check, make sure is empty\\n     * @param newAssetId the new assetId, which must not be empty\\n     */\\n    function assetIdsCheck(\\n        string memory existingAssetId,\\n        string memory newAssetId\\n    ) public pure {\\n        // verify that the existingAssetId is currently empty\\n        confirmAssetIdNotSet(existingAssetId);\\n\\n        require(bytes(newAssetId).length > 0, \\\"assetId must not have 0 length\\\");\\n    }\\n\\n    function archaeologistUnwrappedCheck(bytes32 sarcoId, address archaeologist)\\n        internal\\n        view\\n    {\\n        if (\\n            getArchaeologist(sarcoId, archaeologist).unencryptedShard.length > 0\\n        ) {\\n            revert LibErrors.ArchaeologistAlreadyUnwrapped(archaeologist);\\n        }\\n    }\\n\\n    /**\\n     * @notice Given some bytes32 data, a signature, and an account, verify that the\\n     * identifier was signed by the account.\\n     * @dev The verifyBytes32Signature function is identical to the\\n     * verifyBytesSignature function except for the data type being passed in.\\n     * The reason these are split up is beacuse it's really tricky to convert a\\n     * bytes32 value into a bytes value and have ecrecover still work properly.\\n     * If a simple solution can be found for this problem then please combine\\n     * these two functions together.\\n     * @param data the data to verify\\n     * @param v signature element\\n     * @param r signature element\\n     * @param s signature element\\n     * @param account address to confirm data and signature came from\\n     */\\n    function verifyBytes32Signature(\\n        bytes32 data,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s,\\n        address account\\n    ) internal pure {\\n        // Hash the hash of the data payload\\n        bytes32 messageHash = keccak256(\\n            abi.encodePacked(\\n                \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\",\\n                keccak256(abi.encode(data))\\n            )\\n        );\\n\\n        // Genearate the address from the signature.\\n        // ecrecover should always return a valid address.\\n        address hopefulAddress = ecrecover(messageHash, v, r, s);\\n\\n        if (hopefulAddress != account) {\\n            revert LibErrors.SignatureFromWrongAccount(hopefulAddress, account);\\n        }\\n    }\\n\\n    /**\\n     * @notice Given an identifier, a signature, and an account, verify that the\\n     * identifier was signed by the account.\\n     * @dev The verifyBytes32Signature function is identical to the\\n     * verifyBytesSignature function except for the data type being passed in.\\n     * The reason these are split up is beacuse it's really tricky to convert a\\n     * bytes32 value into a bytes value and have ecrecover still work properly.\\n     * If a simple solution can be found for this problem then please combine\\n     * these two functions together.\\n     * @param data the data to verify\\n     * @param v signature element\\n     * @param r signature element\\n     * @param s signature element\\n     * @param account address to confirm data and signature came from\\n     */\\n    function verifyBytesSignature(\\n        bytes memory data,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s,\\n        address account\\n    ) internal pure {\\n        // Hash the hash of the data payload\\n        bytes32 messageHash = keccak256(\\n            abi.encodePacked(\\n                \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\",\\n                keccak256(abi.encode(data))\\n            )\\n        );\\n\\n        // Genearate the address from the signature.\\n        // ecrecover should always return a valid address.\\n        // It's highly recommended that a hash be passed into ecrecover\\n        address hopefulAddress = ecrecover(messageHash, v, r, s);\\n\\n        if (hopefulAddress != account) {\\n            revert LibErrors.SignatureFromWrongAccount(hopefulAddress, account);\\n        }\\n    }\\n\\n    /// @notice Returns the address that signed some data given the data and the\\n    /// signature.\\n    /// @param data the data to verify\\n    /// @param v signature element\\n    /// @param r signature element\\n    /// @param s signature element\\n    /// @return the address that signed the data\\n    function recoverAddress(\\n        bytes memory data,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        // Hash the hash of the data payload\\n        bytes32 messageHash = keccak256(\\n            abi.encodePacked(\\n                \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\",\\n                keccak256(abi.encode(data))\\n            )\\n        );\\n\\n        // Genearate the address from the signature.\\n        // ecrecover should always return a valid address.\\n        // It's highly recommended that a hash be passed into ecrecover\\n        address account = ecrecover(messageHash, v, r, s);\\n\\n        return account;\\n    }\\n\\n    /**\\n     * @notice Reverts if the given resurrection time is not in the future\\n     * @param resurrectionTime the time to check against block.timestamp\\n     */\\n    function resurrectionInFuture(uint256 resurrectionTime) internal view {\\n        if (resurrectionTime <= block.timestamp) {\\n            revert LibErrors.ResurrectionTimeInPast(resurrectionTime);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates the grace period that an archaeologist has after a\\n     * sarcophagus has reached its resurrection time\\n     * @param resurrectionTime the resurrection timestamp of a sarcophagus\\n     * @return the grace period\\n     * @dev The grace period is dependent on how far out the resurrection time\\n     * is. The longer out the resurrection time, the longer the grace period.\\n     * There is a minimum grace period of 30 minutes, otherwise, it's\\n     * calculated as 1% of the time between now and resurrection time.\\n     */\\n    function getGracePeriod(uint256 resurrectionTime)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        // set a minimum window of 30 minutes\\n        uint16 minimumResurrectionWindow = 30 minutes;\\n\\n        // calculate 1% of the relative time between now and the resurrection\\n        // time\\n        uint256 gracePeriod = (\\n            resurrectionTime > block.timestamp\\n                ? resurrectionTime - block.timestamp\\n                : block.timestamp - resurrectionTime\\n        ) / 100;\\n\\n        // if our calculated grace period is less than the minimum time, we'll\\n        // use the minimum time instead\\n        if (gracePeriod < minimumResurrectionWindow) {\\n            gracePeriod = minimumResurrectionWindow;\\n        }\\n\\n        // return that grace period\\n        return gracePeriod;\\n    }\\n\\n    /**\\n     * @notice Reverts if we're not within the resurrection window (on either\\n     * side)\\n     * @param resurrectionTime the resurrection time of the sarcophagus\\n     * (absolute, i.e. a date time stamp)\\n     */\\n    function unwrapTime(uint256 resurrectionTime) internal view {\\n        // revert if too early\\n        if (resurrectionTime > block.timestamp) {\\n            revert LibErrors.TooEarlyToUnwrap(\\n                resurrectionTime,\\n                block.timestamp\\n            );\\n        }\\n\\n        uint256 resurrectionWindow = getGracePeriod(resurrectionTime);\\n\\n        // revert if too late\\n        if (resurrectionTime + resurrectionWindow < block.timestamp) {\\n            revert LibErrors.TooLateToUnwrap(\\n                resurrectionTime,\\n                resurrectionWindow,\\n                block.timestamp\\n            );\\n        }\\n    }\\n\\n    /// @notice Checks if the archaeologist exists on the sarcophagus.\\n    /// @param sarcoId the identifier of the sarcophagus\\n    /// @param archaeologist the address of the archaeologist\\n    /// @return The boolean true if the archaeologist exists on the sarcophagus\\n    function archaeologistExistsOnSarc(bytes32 sarcoId, address archaeologist)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        AppStorage storage s = LibAppStorage.getAppStorage();\\n\\n        // If the doubleHashedShard on an archaeologist is 0 (which is its default value),\\n        // then the archaeologist doesn't exist on the sarcophagus\\n        return\\n            s\\n            .sarcophagusArchaeologists[sarcoId][archaeologist]\\n                .doubleHashedShard != 0;\\n    }\\n\\n    /// @notice Gets an archaeologist given the sarcophagus identifier and the\\n    /// archaeologist's address.\\n    /// @param sarcoId the identifier of the sarcophagus\\n    /// @param archaeologist the address of the archaeologist\\n    /// @return The archaeologist\\n    function getArchaeologist(bytes32 sarcoId, address archaeologist)\\n        internal\\n        view\\n        returns (LibTypes.ArchaeologistStorage memory)\\n    {\\n        AppStorage storage s = LibAppStorage.getAppStorage();\\n\\n        return s.sarcophagusArchaeologists[sarcoId][archaeologist];\\n    }\\n\\n    /// @notice Checks if a sarcophagus has been finalized by checking if it\\n    /// contains any arweaveTxIds.\\n    /// @param sarcoId the identifier of the sarcophagus\\n    /// @return The boolean true if the sarcophagus has been finalized\\n    function isSarcophagusFinalized(bytes32 sarcoId)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        AppStorage storage s = LibAppStorage.getAppStorage();\\n\\n        return s.sarcophagi[sarcoId].arweaveTxIds.length > 0;\\n    }\\n\\n    /// @notice Calculates the protocol fees to be taken from the embalmer.\\n    /// @return The protocol fees amount\\n    function calculateProtocolFee() internal view returns (uint256) {\\n        AppStorage storage s = LibAppStorage.getAppStorage();\\n\\n        // TODO: Need feedback from the community to determine how protocol fees should be calculated\\n        // Just returns a constant value defined in an env file\\n        return s.protocolFee;\\n    }\\n}\\n\",\"keccak256\":\"0x7c7ad6e6c87850b6b79dc2f3cacec14cda233ce71c4fee63745c00910073e484\",\"license\":\"Unlicense\"},\"contracts/storage/LibAppStorage.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../libraries/LibTypes.sol\\\";\\n\\n// Global storage for the app. Can be accessed in facets and in libraries\\nstruct AppStorage {\\n    IERC20 sarcoToken;\\n    // The amount to be taken from the embalmer each time a protocol fee should\\n    // be collected\\n    uint256 protocolFee;\\n    // The amount of protocol fees currently stored on the contract\\n    uint256 totalProtocolFees;\\n    // sarcophagi\\n    bytes32[] sarcophagusIdentifiers;\\n    // Each archaeologist's total free and cursed bonds\\n    mapping(address => uint256) freeBonds;\\n    mapping(address => uint256) cursedBonds;\\n    // archaeologist stats\\n    mapping(address => mapping(bytes32 => bool)) archaeologistSuccesses;\\n    mapping(address => bytes32[]) archaeologistCancels;\\n    mapping(address => bytes32[]) archaeologistAccusals;\\n    mapping(address => bytes32[]) archaeologistCleanups;\\n    // Track how much archaeologists have made. To be credited and debited\\n    // as archaeologists fulfil their duties and withdraw their rewards\\n    mapping(address => uint256) archaeologistRewards;\\n    mapping(bytes32 => LibTypes.Sarcophagus) sarcophagi;\\n    // sarcophagus ownerships\\n    mapping(address => bytes32[]) embalmerSarcophagi;\\n    mapping(address => bytes32[]) archaeologistSarcophagi;\\n    mapping(address => bytes32[]) recipientSarcophagi;\\n    // Mapping of unencrypted shard double hashes to archaeologists who are\\n    // responsible for them. Needed to optimise Accuse algo - unencrypted shard is\\n    // double hashed and used as a constant O(1) lookup here\\n    mapping(bytes32 => address) doubleHashedShardArchaeologists;\\n    // A mapping used to store an archaeologist's data on a sarcophagus.\\n    // Bounty, digging fees, storage fees, and the hashed shards of the\\n    // archaeologists all need to be stored per sarcophagus. This mapping of a\\n    // mapping stores the archaeologist's data we need per sarcophagus.\\n    // Example usage (to retrieve the bounty an archaeologist may claim on some sarcophagus):\\n    //   LibTypes.ArchaeologistStorage bondedArchaeologist = sarcophagusArchaeologists[sarcoId][archAddress];\\n    //   uint256 bounty = bondedArchaeologist.bounty;\\n    mapping(bytes32 => mapping(address => LibTypes.ArchaeologistStorage)) sarcophagusArchaeologists;\\n}\\n\\nlibrary LibAppStorage {\\n    function getAppStorage() internal pure returns (AppStorage storage s) {\\n        // Set the position of our struct in contract storage\\n        // Since AppStorage s is the first and only state variable declared in\\n        // facets its position in contract storage is 0\\n        assembly {\\n            s.slot := 0\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x367d92e27c7e659b0700d9b43046571d4a3f3942336070687d81b302385dd4cf\",\"license\":\"Unlicense\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506123f4806100206000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c8063364e08011461005c578063523a3f081461007857806369afe1c5146100945780636a5ac74c146100b05780638d58642a146100cc575b600080fd5b6100766004803603810190610071919061197d565b6100e8565b005b610092600480360381019061008d919061197d565b6101e6565b005b6100ae60048036038101906100a99190611bc8565b6102e4565b005b6100ca60048036038101906100c5919061197d565b610773565b005b6100e660048036038101906100e19190611cd8565b610873565b005b6100f23382610b8d565b6000800160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b8152600401610151929190611d84565b6020604051808303816000875af1158015610170573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101949190611de5565b503373ffffffffffffffffffffffffffffffffffffffff167fd91b1e491a880123721b161dbbf8249668b0c546077d7ba4d0016441ca9d8f45826040516101db9190611e12565b60405180910390a250565b6101f03382610cbf565b6000800160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b815260040161024f929190611d84565b6020604051808303816000875af115801561026e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102929190611de5565b503373ffffffffffffffffffffffffffffffffffffffff167fbc84835063c693975166f00cffb19f01a94c2db55b1bf259238c5da3594e5066826040516102d99190611e12565b60405180910390a250565b600160028111156102f8576102f7611e2d565b5b6000600b01600085815260200190815260200160002060010160009054906101000a900460ff16600281111561033157610330611e2d565b5b1461037357826040517f018da68800000000000000000000000000000000000000000000000000000000815260040161036a9190611e6b565b60405180910390fd5b61037c83610df1565b6103bd57826040517f3cb813720000000000000000000000000000000000000000000000000000000081526004016103b49190611e6b565b60405180910390fd5b6103df6000600b01600085815260200190815260200160002060020154610e25565b60006103f983836000015184602001518560400151610e6c565b90506104058482610f1e565b6104485783816040517fd93ccb2000000000000000000000000000000000000000000000000000000000815260040161043f929190611e86565b60405180910390fd5b60005b6000600b01600086815260200190815260200160002060090180549050811015610583578173ffffffffffffffffffffffffffffffffffffffff166000600b01600087815260200190815260200160002060090182815481106104b1576104b0611eaf565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff160361057057336000600b016000878152602001908152602001600020600901828154811061052357610522611eaf565b5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610583565b808061057b90611f0d565b91505061044b565b5061058e8482610f90565b600080601001600086815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050600080601001600087815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905080600001548260000181905550806001015482600101819055508060020154826002018190555060405180602001604052806000815250826003019080519060200190610688929190611759565b5060008160000181905550600081600101819055506000801b8160020181905550604051806020016040528060008152508160030190805190602001906106d0929190611759565b506000600b016000878152602001908152602001600020600401859080600181540180825580915050600190039060005260206000200160009091909190915090805190602001906107239291906117df565b5061072e86336110d4565b7fa11d6c318d830f7ace4ca677c932075082bc61f4356facae5a2a0e1c2a97454c868685336040516107639493929190611fdd565b60405180910390a1505050505050565b61077d3382611218565b6000800160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330846040518463ffffffff1660e01b81526004016107de93929190612029565b6020604051808303816000875af11580156107fd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108219190611de5565b503373ffffffffffffffffffffffffffffffffffffffff167ff882a0847c57aefe6f6c7df2098dd0afd122eb0e886199e223651b8e45fda823826040516108689190611e12565b60405180910390a250565b61087d8233611281565b6001600281111561089157610890611e2d565b5b6000600b01600084815260200190815260200160002060010160009054906101000a900460ff1660028111156108ca576108c9611e2d565b5b1461090c57816040517f018da6880000000000000000000000000000000000000000000000000000000081526004016109039190611e6b565b60405180910390fd5b6109168233610f1e565b61095757336040517f82881f0300000000000000000000000000000000000000000000000000000000815260040161094e9190612060565b60405180910390fd5b6109796000600b016000848152602001908152602001600020600201546112d9565b61098282610df1565b6109c357816040517f3cb813720000000000000000000000000000000000000000000000000000000081526004016109ba9190611e6b565b60405180910390fd5b60006109cf8333611385565b9050600082805190602001206040516020016109eb9190611e6b565b60405160208183030381529060405280519060200120905081604001518114610a51578282604001516040517fd6091bc2000000000000000000000000000000000000000000000000000000008152600401610a489291906120d0565b60405180910390fd5b826000601001600086815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206003019080519060200190610abb929190611865565b50610ac68433610f90565b6001600060060160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600086815260200190815260200160002060006101000a81548160ff021916908315150217905550610b4f3383600001518460200151610b4a9190612100565b6114af565b837f2a1e0100e3bcf67538d8408f2592de3731b8b40f8c6d7dd813e355c7b73848d884604051610b7f9190612156565b60405180910390a250505050565b6000610b97611518565b90508060040160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054821115610c62578060040160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054826040517fa4e3bead000000000000000000000000000000000000000000000000000000008152600401610c59929190612178565b60405180910390fd5b818160040160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610cb391906121a1565b92505081905550505050565b6000610cc9611518565b905080600a0160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054821115610d945780600a0160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054826040517f42681092000000000000000000000000000000000000000000000000000000008152600401610d8b929190612178565b60405180910390fd5b8181600a0160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610de591906121a1565b92505081905550505050565b600080610dfc611518565b9050600081600b0160008581526020019081526020016000206004018054905011915050919050565b428111610e6957806040517f357efa27000000000000000000000000000000000000000000000000000000008152600401610e609190611e12565b60405180910390fd5b50565b60008085604051602001610e809190612156565b60405160208183030381529060405280519060200120604051602001610ea6919061224d565b604051602081830303815290604052805190602001209050600060018287878760405160008152602001604052604051610ee39493929190612282565b6020604051602081039080840390855afa158015610f05573d6000803e3d6000fd5b5050506020604051035190508092505050949350505050565b600080610f29611518565b90506000801b81601001600086815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020154141591505092915050565b6000610f9a611518565b9050600081601001600085815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020604051806080016040529081600082015481526020016001820154815260200160028201548152602001600382018054611029906122f6565b80601f0160208091040260200160405190810160405280929190818152602001828054611055906122f6565b80156110a25780601f10611077576101008083540402835291602001916110a2565b820191906000526020600020905b81548152906001019060200180831161108557829003601f168201915b505050505081525050905060006110c18260000151836020015161151d565b90506110cd8482611533565b5050505050565b60006110de611518565b9050600081601001600085815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060405180608001604052908160008201548152602001600182015481526020016002820154815260200160038201805461116d906122f6565b80601f0160208091040260200160405190810160405280929190818152602001828054611199906122f6565b80156111e65780601f106111bb576101008083540402835291602001916111e6565b820191906000526020600020905b8154815290600101906020018083116111c957829003601f168201915b505050505081525050905060006112058260000151836020015161151d565b9050611211848261154b565b5050505050565b6000611222611518565b9050818160040160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546112759190612100565b92505081905550505050565b600061128d8383611385565b606001515111156112d557806040517f1b933fa00000000000000000000000000000000000000000000000000000000081526004016112cc9190612060565b60405180910390fd5b5050565b428111156113205780426040517f0674c590000000000000000000000000000000000000000000000000000000008152600401611317929190612178565b60405180910390fd5b600061132b82611563565b905042818361133a9190612100565b1015611381578181426040517f4fd4cfc500000000000000000000000000000000000000000000000000000000815260040161137893929190612327565b60405180910390fd5b5050565b61138d6118eb565b6000611397611518565b905080601001600085815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020604051806080016040529081600082015481526020016001820154815260200160028201548152602001600382018054611424906122f6565b80601f0160208091040260200160405190810160405280929190818152602001828054611450906122f6565b801561149d5780601f106114725761010080835404028352916020019161149d565b820191906000526020600020905b81548152906001019060200180831161148057829003601f168201915b50505050508152505091505092915050565b60006114b9611518565b90508181600a0160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461150c9190612100565b92505081905550505050565b600090565b6000818361152b9190612100565b905092915050565b61153d82826115be565b6115478282611218565b5050565b6115558282610b8d565b61155f82826116f0565b5050565b60008061070890506000606442851161158757844261158291906121a1565b611594565b428561159391906121a1565b5b61159e919061238d565b90508161ffff168110156115b4578161ffff1690505b8092505050919050565b60006115c8611518565b90508060050160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054821115611693578060050160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054826040517faf5a111b00000000000000000000000000000000000000000000000000000000815260040161168a929190612178565b60405180910390fd5b818160050160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546116e491906121a1565b92505081905550505050565b60006116fa611518565b9050818160050160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461174d9190612100565b92505081905550505050565b828054611765906122f6565b90600052602060002090601f01602090048101928261178757600085556117ce565b82601f106117a057805160ff19168380011785556117ce565b828001600101855582156117ce579182015b828111156117cd5782518255916020019190600101906117b2565b5b5090506117db9190611916565b5090565b8280546117eb906122f6565b90600052602060002090601f01602090048101928261180d5760008555611854565b82601f1061182657805160ff1916838001178555611854565b82800160010185558215611854579182015b82811115611853578251825591602001919060010190611838565b5b5090506118619190611916565b5090565b828054611871906122f6565b90600052602060002090601f01602090048101928261189357600085556118da565b82601f106118ac57805160ff19168380011785556118da565b828001600101855582156118da579182015b828111156118d95782518255916020019190600101906118be565b5b5090506118e79190611916565b5090565b6040518060800160405280600081526020016000815260200160008019168152602001606081525090565b5b8082111561192f576000816000905550600101611917565b5090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b61195a81611947565b811461196557600080fd5b50565b60008135905061197781611951565b92915050565b6000602082840312156119935761199261193d565b5b60006119a184828501611968565b91505092915050565b6000819050919050565b6119bd816119aa565b81146119c857600080fd5b50565b6000813590506119da816119b4565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611a33826119ea565b810181811067ffffffffffffffff82111715611a5257611a516119fb565b5b80604052505050565b6000611a65611933565b9050611a718282611a2a565b919050565b600067ffffffffffffffff821115611a9157611a906119fb565b5b611a9a826119ea565b9050602081019050919050565b82818337600083830152505050565b6000611ac9611ac484611a76565b611a5b565b905082815260208101848484011115611ae557611ae46119e5565b5b611af0848285611aa7565b509392505050565b600082601f830112611b0d57611b0c6119e0565b5b8135611b1d848260208601611ab6565b91505092915050565b600080fd5b600060ff82169050919050565b611b4181611b2b565b8114611b4c57600080fd5b50565b600081359050611b5e81611b38565b92915050565b600060608284031215611b7a57611b79611b26565b5b611b846060611a5b565b90506000611b9484828501611b4f565b6000830152506020611ba8848285016119cb565b6020830152506040611bbc848285016119cb565b60408301525092915050565b600080600060a08486031215611be157611be061193d565b5b6000611bef868287016119cb565b935050602084013567ffffffffffffffff811115611c1057611c0f611942565b5b611c1c86828701611af8565b9250506040611c2d86828701611b64565b9150509250925092565b600067ffffffffffffffff821115611c5257611c516119fb565b5b611c5b826119ea565b9050602081019050919050565b6000611c7b611c7684611c37565b611a5b565b905082815260208101848484011115611c9757611c966119e5565b5b611ca2848285611aa7565b509392505050565b600082601f830112611cbf57611cbe6119e0565b5b8135611ccf848260208601611c68565b91505092915050565b60008060408385031215611cef57611cee61193d565b5b6000611cfd858286016119cb565b925050602083013567ffffffffffffffff811115611d1e57611d1d611942565b5b611d2a85828601611caa565b9150509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611d5f82611d34565b9050919050565b611d6f81611d54565b82525050565b611d7e81611947565b82525050565b6000604082019050611d996000830185611d66565b611da66020830184611d75565b9392505050565b60008115159050919050565b611dc281611dad565b8114611dcd57600080fd5b50565b600081519050611ddf81611db9565b92915050565b600060208284031215611dfb57611dfa61193d565b5b6000611e0984828501611dd0565b91505092915050565b6000602082019050611e276000830184611d75565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b611e65816119aa565b82525050565b6000602082019050611e806000830184611e5c565b92915050565b6000604082019050611e9b6000830185611e5c565b611ea86020830184611d66565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611f1882611947565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203611f4a57611f49611ede565b5b600182019050919050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611f8f578082015181840152602081019050611f74565b83811115611f9e576000848401525b50505050565b6000611faf82611f55565b611fb98185611f60565b9350611fc9818560208601611f71565b611fd2816119ea565b840191505092915050565b6000608082019050611ff26000830187611e5c565b81810360208301526120048186611fa4565b90506120136040830185611d66565b6120206060830184611d66565b95945050505050565b600060608201905061203e6000830186611d66565b61204b6020830185611d66565b6120586040830184611d75565b949350505050565b60006020820190506120756000830184611d66565b92915050565b600081519050919050565b600082825260208201905092915050565b60006120a28261207b565b6120ac8185612086565b93506120bc818560208601611f71565b6120c5816119ea565b840191505092915050565b600060408201905081810360008301526120ea8185612097565b90506120f96020830184611e5c565b9392505050565b600061210b82611947565b915061211683611947565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561214b5761214a611ede565b5b828201905092915050565b600060208201905081810360008301526121708184612097565b905092915050565b600060408201905061218d6000830185611d75565b61219a6020830184611d75565b9392505050565b60006121ac82611947565b91506121b783611947565b9250828210156121ca576121c9611ede565b5b828203905092915050565b600081905092915050565b7f19457468657265756d205369676e6564204d6573736167653a0a333200000000600082015250565b6000612216601c836121d5565b9150612221826121e0565b601c82019050919050565b6000819050919050565b612247612242826119aa565b61222c565b82525050565b600061225882612209565b91506122648284612236565b60208201915081905092915050565b61227c81611b2b565b82525050565b60006080820190506122976000830187611e5c565b6122a46020830186612273565b6122b16040830185611e5c565b6122be6060830184611e5c565b95945050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061230e57607f821691505b602082108103612321576123206122c7565b5b50919050565b600060608201905061233c6000830186611d75565b6123496020830185611d75565b6123566040830184611d75565b949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061239882611947565b91506123a383611947565b9250826123b3576123b261235e565b5b82820490509291505056fea2646970667358221220a82076e3c8c507f50ea528f3245c4b3b23b3b570b551cd83bce9d8bc5ffaba0764736f6c634300080d0033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "depositFreeBond(uint256)": {
        "params": {
          "amount": "The amount to deposit"
        }
      },
      "finalizeTransfer(bytes32,string,(uint8,bytes32,bytes32))": {
        "params": {
          "arweaveTxId": "The id of the arweave transaction where the new shard",
          "oldArchSignature": "The signature of the old archaeologist was uploaded",
          "sarcoId": "The identifier of the sarcophagus"
        }
      },
      "unwrapSarcophagus(bytes32,bytes)": {
        "details": "Verifies that the unencrypted shard matches the hashedShard stored on chain and pays the archaeologist.",
        "params": {
          "sarcoId": "The identifier of the sarcophagus to unwrap",
          "unencryptedShard": "The archaeologist's corresponding unencrypted shard"
        }
      },
      "withdrawFreeBond(uint256)": {
        "params": {
          "amount": "The amount to withdraw"
        }
      },
      "withdrawReward(uint256)": {
        "params": {
          "amount": "The amount to withdraw"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "depositFreeBond(uint256)": {
        "notice": "Deposits an archaeologist's free bond to the contract."
      },
      "finalizeTransfer(bytes32,string,(uint8,bytes32,bytes32))": {
        "notice": "Finalizes a transfer of roles and responsibilities between two archaeologists. This is to be called by the new archaeologist."
      },
      "unwrapSarcophagus(bytes32,bytes)": {
        "notice": "Unwraps the sarcophagus."
      },
      "withdrawFreeBond(uint256)": {
        "notice": "Withdraws an archaeologist's free bond from the contract."
      },
      "withdrawReward(uint256)": {
        "notice": "Withdraws froms an archaeologist's reward pool"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 128,
        "contract": "contracts/facets/ArchaeologistFacet.sol:ArchaeologistFacet",
        "label": "s",
        "offset": 0,
        "slot": "0",
        "type": "t_struct(AppStorage)3729_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_string_storage)dyn_storage": {
        "base": "t_string_storage",
        "encoding": "dynamic_array",
        "label": "string[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20)77": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_enum(SarcophagusState)3099": {
        "encoding": "inplace",
        "label": "enum LibTypes.SarcophagusState",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_array(t_bytes32)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bytes32[])",
        "numberOfBytes": "32",
        "value": "t_array(t_bytes32)dyn_storage"
      },
      "t_mapping(t_address,t_mapping(t_bytes32,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(bytes32 => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bytes32,t_bool)"
      },
      "t_mapping(t_address,t_struct(ArchaeologistStorage)3135_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct LibTypes.ArchaeologistStorage)",
        "numberOfBytes": "32",
        "value": "t_struct(ArchaeologistStorage)3135_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_address)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_mapping(t_address,t_struct(ArchaeologistStorage)3135_storage))": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => mapping(address => struct LibTypes.ArchaeologistStorage))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(ArchaeologistStorage)3135_storage)"
      },
      "t_mapping(t_bytes32,t_struct(Sarcophagus)3163_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct LibTypes.Sarcophagus)",
        "numberOfBytes": "32",
        "value": "t_struct(Sarcophagus)3163_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AppStorage)3729_storage": {
        "encoding": "inplace",
        "label": "struct AppStorage",
        "members": [
          {
            "astId": 3657,
            "contract": "contracts/facets/ArchaeologistFacet.sol:ArchaeologistFacet",
            "label": "sarcoToken",
            "offset": 0,
            "slot": "0",
            "type": "t_contract(IERC20)77"
          },
          {
            "astId": 3659,
            "contract": "contracts/facets/ArchaeologistFacet.sol:ArchaeologistFacet",
            "label": "protocolFee",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 3661,
            "contract": "contracts/facets/ArchaeologistFacet.sol:ArchaeologistFacet",
            "label": "totalProtocolFees",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 3664,
            "contract": "contracts/facets/ArchaeologistFacet.sol:ArchaeologistFacet",
            "label": "sarcophagusIdentifiers",
            "offset": 0,
            "slot": "3",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 3668,
            "contract": "contracts/facets/ArchaeologistFacet.sol:ArchaeologistFacet",
            "label": "freeBonds",
            "offset": 0,
            "slot": "4",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 3672,
            "contract": "contracts/facets/ArchaeologistFacet.sol:ArchaeologistFacet",
            "label": "cursedBonds",
            "offset": 0,
            "slot": "5",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 3678,
            "contract": "contracts/facets/ArchaeologistFacet.sol:ArchaeologistFacet",
            "label": "archaeologistSuccesses",
            "offset": 0,
            "slot": "6",
            "type": "t_mapping(t_address,t_mapping(t_bytes32,t_bool))"
          },
          {
            "astId": 3683,
            "contract": "contracts/facets/ArchaeologistFacet.sol:ArchaeologistFacet",
            "label": "archaeologistCancels",
            "offset": 0,
            "slot": "7",
            "type": "t_mapping(t_address,t_array(t_bytes32)dyn_storage)"
          },
          {
            "astId": 3688,
            "contract": "contracts/facets/ArchaeologistFacet.sol:ArchaeologistFacet",
            "label": "archaeologistAccusals",
            "offset": 0,
            "slot": "8",
            "type": "t_mapping(t_address,t_array(t_bytes32)dyn_storage)"
          },
          {
            "astId": 3693,
            "contract": "contracts/facets/ArchaeologistFacet.sol:ArchaeologistFacet",
            "label": "archaeologistCleanups",
            "offset": 0,
            "slot": "9",
            "type": "t_mapping(t_address,t_array(t_bytes32)dyn_storage)"
          },
          {
            "astId": 3697,
            "contract": "contracts/facets/ArchaeologistFacet.sol:ArchaeologistFacet",
            "label": "archaeologistRewards",
            "offset": 0,
            "slot": "10",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 3702,
            "contract": "contracts/facets/ArchaeologistFacet.sol:ArchaeologistFacet",
            "label": "sarcophagi",
            "offset": 0,
            "slot": "11",
            "type": "t_mapping(t_bytes32,t_struct(Sarcophagus)3163_storage)"
          },
          {
            "astId": 3707,
            "contract": "contracts/facets/ArchaeologistFacet.sol:ArchaeologistFacet",
            "label": "embalmerSarcophagi",
            "offset": 0,
            "slot": "12",
            "type": "t_mapping(t_address,t_array(t_bytes32)dyn_storage)"
          },
          {
            "astId": 3712,
            "contract": "contracts/facets/ArchaeologistFacet.sol:ArchaeologistFacet",
            "label": "archaeologistSarcophagi",
            "offset": 0,
            "slot": "13",
            "type": "t_mapping(t_address,t_array(t_bytes32)dyn_storage)"
          },
          {
            "astId": 3717,
            "contract": "contracts/facets/ArchaeologistFacet.sol:ArchaeologistFacet",
            "label": "recipientSarcophagi",
            "offset": 0,
            "slot": "14",
            "type": "t_mapping(t_address,t_array(t_bytes32)dyn_storage)"
          },
          {
            "astId": 3721,
            "contract": "contracts/facets/ArchaeologistFacet.sol:ArchaeologistFacet",
            "label": "doubleHashedShardArchaeologists",
            "offset": 0,
            "slot": "15",
            "type": "t_mapping(t_bytes32,t_address)"
          },
          {
            "astId": 3728,
            "contract": "contracts/facets/ArchaeologistFacet.sol:ArchaeologistFacet",
            "label": "sarcophagusArchaeologists",
            "offset": 0,
            "slot": "16",
            "type": "t_mapping(t_bytes32,t_mapping(t_address,t_struct(ArchaeologistStorage)3135_storage))"
          }
        ],
        "numberOfBytes": "544"
      },
      "t_struct(ArchaeologistStorage)3135_storage": {
        "encoding": "inplace",
        "label": "struct LibTypes.ArchaeologistStorage",
        "members": [
          {
            "astId": 3128,
            "contract": "contracts/facets/ArchaeologistFacet.sol:ArchaeologistFacet",
            "label": "diggingFee",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 3130,
            "contract": "contracts/facets/ArchaeologistFacet.sol:ArchaeologistFacet",
            "label": "bounty",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 3132,
            "contract": "contracts/facets/ArchaeologistFacet.sol:ArchaeologistFacet",
            "label": "doubleHashedShard",
            "offset": 0,
            "slot": "2",
            "type": "t_bytes32"
          },
          {
            "astId": 3134,
            "contract": "contracts/facets/ArchaeologistFacet.sol:ArchaeologistFacet",
            "label": "unencryptedShard",
            "offset": 0,
            "slot": "3",
            "type": "t_bytes_storage"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(Sarcophagus)3163_storage": {
        "encoding": "inplace",
        "label": "struct LibTypes.Sarcophagus",
        "members": [
          {
            "astId": 3137,
            "contract": "contracts/facets/ArchaeologistFacet.sol:ArchaeologistFacet",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 3140,
            "contract": "contracts/facets/ArchaeologistFacet.sol:ArchaeologistFacet",
            "label": "state",
            "offset": 0,
            "slot": "1",
            "type": "t_enum(SarcophagusState)3099"
          },
          {
            "astId": 3142,
            "contract": "contracts/facets/ArchaeologistFacet.sol:ArchaeologistFacet",
            "label": "canBeTransferred",
            "offset": 1,
            "slot": "1",
            "type": "t_bool"
          },
          {
            "astId": 3144,
            "contract": "contracts/facets/ArchaeologistFacet.sol:ArchaeologistFacet",
            "label": "minShards",
            "offset": 2,
            "slot": "1",
            "type": "t_uint8"
          },
          {
            "astId": 3146,
            "contract": "contracts/facets/ArchaeologistFacet.sol:ArchaeologistFacet",
            "label": "resurrectionTime",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 3148,
            "contract": "contracts/facets/ArchaeologistFacet.sol:ArchaeologistFacet",
            "label": "maxResurrectionInterval",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 3151,
            "contract": "contracts/facets/ArchaeologistFacet.sol:ArchaeologistFacet",
            "label": "arweaveTxIds",
            "offset": 0,
            "slot": "4",
            "type": "t_array(t_string_storage)dyn_storage"
          },
          {
            "astId": 3153,
            "contract": "contracts/facets/ArchaeologistFacet.sol:ArchaeologistFacet",
            "label": "storageFee",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 3155,
            "contract": "contracts/facets/ArchaeologistFacet.sol:ArchaeologistFacet",
            "label": "embalmer",
            "offset": 0,
            "slot": "6",
            "type": "t_address"
          },
          {
            "astId": 3157,
            "contract": "contracts/facets/ArchaeologistFacet.sol:ArchaeologistFacet",
            "label": "recipientAddress",
            "offset": 0,
            "slot": "7",
            "type": "t_address"
          },
          {
            "astId": 3159,
            "contract": "contracts/facets/ArchaeologistFacet.sol:ArchaeologistFacet",
            "label": "arweaveArchaeologist",
            "offset": 0,
            "slot": "8",
            "type": "t_address"
          },
          {
            "astId": 3162,
            "contract": "contracts/facets/ArchaeologistFacet.sol:ArchaeologistFacet",
            "label": "archaeologists",
            "offset": 0,
            "slot": "9",
            "type": "t_array(t_address)dyn_storage"
          }
        ],
        "numberOfBytes": "320"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}