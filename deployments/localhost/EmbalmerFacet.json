{
  "address": "0xad8BE3e1f89c441600834F76a3d2677869D8F5df",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "archaeologists",
          "type": "address[]"
        }
      ],
      "name": "ArchaeologistListNotUnique",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "archaeologist",
          "type": "address"
        }
      ],
      "name": "ArchaeologistNotOnSarcophagus",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ArweaveArchaeologistNotInList",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ArweaveTxIdEmpty",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "signaturesLength",
          "type": "uint256"
        }
      ],
      "name": "IncorrectNumberOfArchaeologistSignatures",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MaxResurrectionIntervalIsZero",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "minShards",
          "type": "uint8"
        }
      ],
      "name": "MinShardsGreaterThanArchaeologists",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MinShardsZero",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newResurrectionTime",
          "type": "uint256"
        }
      ],
      "name": "NewResurrectionTimeInPast",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newResurrectionTime",
          "type": "uint256"
        }
      ],
      "name": "NewResurrectionTimeTooLarge",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoArchaeologistsProvided",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "cursedBond",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "NotEnoughCursedBond",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "freeBond",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "NotEnoughFreeBond",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "resurrectionTime",
          "type": "uint256"
        }
      ],
      "name": "ResurrectionTimeInPast",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "sarcoId",
          "type": "bytes32"
        }
      ],
      "name": "SarcophagusAlreadyExists",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "sarcoId",
          "type": "bytes32"
        }
      ],
      "name": "SarcophagusAlreadyFinalized",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "sarcoId",
          "type": "bytes32"
        }
      ],
      "name": "SarcophagusDoesNotExist",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SarcophagusIsUnwrappable",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "sarcoId",
          "type": "bytes32"
        }
      ],
      "name": "SarcophagusNotFinalized",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "embalmer",
          "type": "address"
        }
      ],
      "name": "SenderNotEmbalmer",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "hopefulAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "actualAddress",
          "type": "address"
        }
      ],
      "name": "SignatureFromWrongAccount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SignatureListNotUnique",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "sarcoId",
          "type": "bytes32"
        }
      ],
      "name": "BurySarcophagus",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "sarcoId",
          "type": "bytes32"
        }
      ],
      "name": "CancelSarcophagus",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "sarcoId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "arweaveTxId",
          "type": "string"
        }
      ],
      "name": "FinalizeSarcophagus",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "sarcoId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "embalmer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalFees",
          "type": "uint256"
        }
      ],
      "name": "InitializeSarcophagus",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "sarcoId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "resurrectionTime",
          "type": "uint256"
        }
      ],
      "name": "RewrapSarcophagus",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "sarcoId",
          "type": "bytes32"
        }
      ],
      "name": "burySarcophagus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "sarcoId",
          "type": "bytes32"
        }
      ],
      "name": "cancelSarcophagus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "sarcoId",
          "type": "bytes32"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            },
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct LibTypes.SignatureWithAccount[]",
          "name": "archaeologistSignatures",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct LibTypes.Signature",
          "name": "arweaveArchaeologistSignature",
          "type": "tuple"
        },
        {
          "internalType": "string",
          "name": "arweaveTxId",
          "type": "string"
        }
      ],
      "name": "finalizeSarcophagus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "archAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "storageFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "diggingFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "bounty",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "hashedShard",
              "type": "bytes32"
            }
          ],
          "internalType": "struct LibTypes.ArchaeologistMemory[]",
          "name": "archaeologists",
          "type": "tuple[]"
        },
        {
          "internalType": "address",
          "name": "arweaveArchaeologist",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "resurrectionTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxResurrectionInterval",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "canBeTransferred",
          "type": "bool"
        },
        {
          "internalType": "uint8",
          "name": "minShards",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "sarcoId",
          "type": "bytes32"
        }
      ],
      "name": "initializeSarcophagus",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "sarcoId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "resurrectionTime",
          "type": "uint256"
        }
      ],
      "name": "rewrapSarcophagus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "69dfe71399ca13d901626b8fc6d4f940",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"archaeologists\",\"type\":\"address[]\"}],\"name\":\"ArchaeologistListNotUnique\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"archaeologist\",\"type\":\"address\"}],\"name\":\"ArchaeologistNotOnSarcophagus\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ArweaveArchaeologistNotInList\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ArweaveTxIdEmpty\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"signaturesLength\",\"type\":\"uint256\"}],\"name\":\"IncorrectNumberOfArchaeologistSignatures\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MaxResurrectionIntervalIsZero\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"minShards\",\"type\":\"uint8\"}],\"name\":\"MinShardsGreaterThanArchaeologists\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MinShardsZero\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newResurrectionTime\",\"type\":\"uint256\"}],\"name\":\"NewResurrectionTimeInPast\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newResurrectionTime\",\"type\":\"uint256\"}],\"name\":\"NewResurrectionTimeTooLarge\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoArchaeologistsProvided\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cursedBond\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"NotEnoughCursedBond\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"freeBond\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"NotEnoughFreeBond\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"resurrectionTime\",\"type\":\"uint256\"}],\"name\":\"ResurrectionTimeInPast\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"sarcoId\",\"type\":\"bytes32\"}],\"name\":\"SarcophagusAlreadyExists\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"sarcoId\",\"type\":\"bytes32\"}],\"name\":\"SarcophagusAlreadyFinalized\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"sarcoId\",\"type\":\"bytes32\"}],\"name\":\"SarcophagusDoesNotExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SarcophagusIsUnwrappable\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"sarcoId\",\"type\":\"bytes32\"}],\"name\":\"SarcophagusNotFinalized\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"embalmer\",\"type\":\"address\"}],\"name\":\"SenderNotEmbalmer\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"hopefulAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"actualAddress\",\"type\":\"address\"}],\"name\":\"SignatureFromWrongAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SignatureListNotUnique\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"sarcoId\",\"type\":\"bytes32\"}],\"name\":\"BurySarcophagus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"sarcoId\",\"type\":\"bytes32\"}],\"name\":\"CancelSarcophagus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"sarcoId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"arweaveTxId\",\"type\":\"string\"}],\"name\":\"FinalizeSarcophagus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"sarcoId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"embalmer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalFees\",\"type\":\"uint256\"}],\"name\":\"InitializeSarcophagus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"sarcoId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"resurrectionTime\",\"type\":\"uint256\"}],\"name\":\"RewrapSarcophagus\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"sarcoId\",\"type\":\"bytes32\"}],\"name\":\"burySarcophagus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"sarcoId\",\"type\":\"bytes32\"}],\"name\":\"cancelSarcophagus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"sarcoId\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct LibTypes.SignatureWithAccount[]\",\"name\":\"archaeologistSignatures\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct LibTypes.Signature\",\"name\":\"arweaveArchaeologistSignature\",\"type\":\"tuple\"},{\"internalType\":\"string\",\"name\":\"arweaveTxId\",\"type\":\"string\"}],\"name\":\"finalizeSarcophagus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"archAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"storageFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"diggingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bounty\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"hashedShard\",\"type\":\"bytes32\"}],\"internalType\":\"struct LibTypes.ArchaeologistMemory[]\",\"name\":\"archaeologists\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"arweaveArchaeologist\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"resurrectionTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxResurrectionInterval\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"canBeTransferred\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"minShards\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"sarcoId\",\"type\":\"bytes32\"}],\"name\":\"initializeSarcophagus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"sarcoId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"resurrectionTime\",\"type\":\"uint256\"}],\"name\":\"rewrapSarcophagus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"burySarcophagus(bytes32)\":{\"details\":\"Extends the resurrection time into infinity so that that unwrap will never be successful.\",\"params\":{\"sarcoId\":\"the identifier of the sarcophagus\"}},\"cancelSarcophagus(bytes32)\":{\"params\":{\"sarcoId\":\"the identifier of the sarcophagus\"}},\"finalizeSarcophagus(bytes32,(address,uint8,bytes32,bytes32)[],(uint8,bytes32,bytes32),string)\":{\"details\":\"The archaeologistSignatures must be sent in the same order that the archaeologists were sent to the initializeSarcophagus function, otherwise the transaction will revert.\",\"params\":{\"archaeologistSignatures\":\"the signatures of the archaeologists. This is archaeologist.length - 1 since the arweave archaeologist will be providing their own signature.\",\"arweaveArchaeologistSignature\":\"the signature of the archaeologist who uploaded to arweave\",\"arweaveTxId\":\"the arweave transaction id\",\"sarcoId\":\"the identifier of the sarcophagus\"}},\"initializeSarcophagus(string,(address,uint256,uint256,uint256,bytes32)[],address,address,uint256,uint256,bool,uint8,bytes32)\":{\"details\":\"archaeologists will have to sign off on this interval, and commit to it for the lifetime of the sarcophagus.\",\"params\":{\"archaeologists\":\"the data for the archaeologists\",\"arweaveArchaeologist\":\"The address of the archaeologist who uploads to arweave\",\"canBeTransferred\":\"Whether the sarcophagus can be transferred\",\"maxResurrectionInterval\":\"the maximum length of time that any new resurrection times can be from time of rewrap\",\"minShards\":\"The minimum number of shards required to unwrap the sarcophagus\",\"name\":\"the name of the sarcophagus\",\"recipient\":\"the address of the recipient\",\"resurrectionTime\":\"the resurrection time of the sarcophagus\",\"sarcoId\":\"Unique identifier of the sarcophagus\"},\"returns\":{\"_0\":\"The index of the new sarcophagus\"}},\"rewrapSarcophagus(bytes32,uint256)\":{\"details\":\"The embalmer sets a new resurrection time sometime in the future.\",\"params\":{\"resurrectionTime\":\"the new resurrection time\",\"sarcoId\":\"the identifier of the sarcophagus\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"burySarcophagus(bytes32)\":{\"notice\":\"Permanently closes the sarcophagus, giving it no opportunity to be resurrected. This may only be done after finalizeSarcophagus and before the resurrection time has passed.\"},\"cancelSarcophagus(bytes32)\":{\"notice\":\"Cancels a sarcophagus. An embalmer may cancel a sarcophagus after `initializeSarcophagus` but before `finalizeSarcophagus`. The embalmer's fees that were locked up will be refunded.\"},\"finalizeSarcophagus(bytes32,(address,uint8,bytes32,bytes32)[],(uint8,bytes32,bytes32),string)\":{\"notice\":\"Embalmer finalizes the skeleton of a sarcophagus. FinalizeSarcophagus is the last step of the two step mummification process. The purpose of finalizeSarcophagus is to:   - Provide the archaeologists' signatures to the contract. These     confirm that the archaeologists approve the fees stored on the     contract and are ready to work.   - Provide the arweave transaction id to be stored on chain.   - Reward the archaeologist who uploaded to payload to arweave with the storage fee.\"},\"initializeSarcophagus(string,(address,uint256,uint256,uint256,bytes32)[],address,address,uint256,uint256,bool,uint8,bytes32)\":{\"notice\":\"Embalmer creates the skeleton for a new sarcopahgus. InitializeSarcophagus is the first step of the two step mummification process. The purpose of intializeSarcophagus is to:   - Lock up payment for the archaeologists (bounty, digging fees, and storage fee)   - Store hashes of the unencrypted shards on chain   - Store the particapting archaeologists' addresses and individual     denominations of fees dedicated to each   - Create the sarcophagus object After initializeSarcophagus the archaeologists have been chosen but may have no knowledge of the sarcophagus yet. An archaeologist still needs to upload a payload to arweave and also communicate directly with the embalmer to indicate that they are ready to do work. After this the finalizeSarcohpagus() method should be called, which is the second step.\"},\"rewrapSarcophagus(bytes32,uint256)\":{\"notice\":\"The embalmer may extend the life of the sarcophagus as long as the resurrection time has not passed yet.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/facets/EmbalmerFacet.sol\":\"EmbalmerFacet\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"contracts/facets/EmbalmerFacet.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../libraries/LibTypes.sol\\\";\\nimport {LibErrors} from \\\"../libraries/LibErrors.sol\\\";\\nimport {LibBonds} from \\\"../libraries/LibBonds.sol\\\";\\nimport {LibRewards} from \\\"../libraries/LibRewards.sol\\\";\\nimport {LibUtils} from \\\"../libraries/LibUtils.sol\\\";\\nimport {AppStorage} from \\\"../storage/LibAppStorage.sol\\\";\\n\\ncontract EmbalmerFacet {\\n    // IMPORTANT: AppStorage must be the first state variable in the facet.\\n    AppStorage internal s;\\n\\n    event InitializeSarcophagus(\\n        bytes32 indexed sarcoId,\\n        address embalmer,\\n        uint256 totalFees\\n    );\\n\\n    event FinalizeSarcophagus(bytes32 indexed sarcoId, string arweaveTxId);\\n\\n    event RewrapSarcophagus(bytes32 indexed sarcoId, uint256 resurrectionTime);\\n\\n    event CancelSarcophagus(bytes32 indexed sarcoId);\\n\\n    event BurySarcophagus(bytes32 indexed sarcoId);\\n\\n    // Archaeologist's addresses are added to this mapping per sarcophagus to\\n    // verify that the same archaeologist signature is not used more than once.\\n    mapping(bytes32 => mapping(address => bool)) private verifiedArchaeologists;\\n\\n    /// @notice Embalmer creates the skeleton for a new sarcopahgus.\\n    ///\\n    /// InitializeSarcophagus is the first step of the two step mummification\\n    /// process.\\n    ///\\n    /// The purpose of intializeSarcophagus is to:\\n    ///   - Lock up payment for the archaeologists (bounty, digging fees, and storage fee)\\n    ///   - Store hashes of the unencrypted shards on chain\\n    ///   - Store the particapting archaeologists' addresses and individual\\n    ///     denominations of fees dedicated to each\\n    ///   - Create the sarcophagus object\\n    ///\\n    /// After initializeSarcophagus the archaeologists have been chosen but may\\n    /// have no knowledge of the sarcophagus yet. An archaeologist still needs\\n    /// to upload a payload to arweave and also communicate directly with the\\n    /// embalmer to indicate that they are ready to do work. After this the\\n    /// finalizeSarcohpagus() method should be called, which is the second step.\\n    ///\\n    /// @param name the name of the sarcophagus\\n    /// @param archaeologists the data for the archaeologists\\n    /// @param arweaveArchaeologist The address of the archaeologist who uploads to arweave\\n    /// @param recipient the address of the recipient\\n    /// @param resurrectionTime the resurrection time of the sarcophagus\\n    /// @param maxResurrectionInterval the maximum length of time that any new resurrection times can be from time of rewrap\\n    /// @dev archaeologists will have to sign off on this interval, and commit to it for the lifetime of the sarcophagus.\\n    /// @param canBeTransferred Whether the sarcophagus can be transferred\\n    /// @param minShards The minimum number of shards required to unwrap the sarcophagus\\n    /// @param sarcoId Unique identifier of the sarcophagus\\n    /// @return The index of the new sarcophagus\\n    function initializeSarcophagus(\\n        string memory name,\\n        LibTypes.ArchaeologistMemory[] memory archaeologists,\\n        address arweaveArchaeologist,\\n        address recipient,\\n        uint256 resurrectionTime,\\n        uint256 maxResurrectionInterval,\\n        bool canBeTransferred,\\n        uint8 minShards,\\n        bytes32 sarcoId\\n    ) external returns (uint256) {\\n        // Confirm that this exact sarcophagus does not already exist\\n        if (\\n            s.sarcophagi[sarcoId].state !=\\n            LibTypes.SarcophagusState.DoesNotExist\\n        ) {\\n            revert LibErrors.SarcophagusAlreadyExists(sarcoId);\\n        }\\n\\n        // Confirm that the ressurection time is in the future\\n        if (resurrectionTime <= block.timestamp) {\\n            revert LibErrors.ResurrectionTimeInPast(resurrectionTime);\\n        }\\n\\n        // Confirm that archaeologists are provided\\n        if (archaeologists.length == 0) {\\n            revert LibErrors.NoArchaeologistsProvided();\\n        }\\n\\n        // Confirm that minShards is less than the number of archaeologists\\n        if (minShards > archaeologists.length) {\\n            revert LibErrors.MinShardsGreaterThanArchaeologists(minShards);\\n        }\\n\\n        // Confirm that minShards is greater than 0\\n        if (minShards == 0) {\\n            revert LibErrors.MinShardsZero();\\n        }\\n\\n        // Confirm that maxResurrectionInterval is greater than 0\\n        if (maxResurrectionInterval == 0) {\\n            revert LibErrors.MaxResurrectionIntervalIsZero();\\n        }\\n\\n        // Initialize a list of archaeologist addresses to be passed in to the\\n        // sarcophagus object\\n        address[] memory archaeologistsToBond = new address[](\\n            archaeologists.length\\n        );\\n\\n        // Initialize the storage fee of the archaeologist who uploades to\\n        // arweave. This will be obtained in the for loop and stored on the\\n        // sarcophagus object.\\n        uint256 storageFee = 0;\\n\\n        for (uint256 i = 0; i < archaeologists.length; i++) {\\n            LibTypes.ArchaeologistMemory memory arch = archaeologists[i];\\n\\n            // Confirm that the archaeologist list is unique. This is done by\\n            // checking that the archaeologist does not already exist from\\n            // previous iterations in this loop.\\n            if (LibUtils.archaeologistExistsOnSarc(sarcoId, arch.archAddress)) {\\n                revert LibErrors.ArchaeologistListNotUnique(\\n                    archaeologistsToBond\\n                );\\n            }\\n\\n            // If the archaeologist is the arweave archaeologist, set the\\n            // storage fee. This is the only storage fee we care about.\\n            if (arch.archAddress == arweaveArchaeologist) {\\n                storageFee = arch.storageFee;\\n            }\\n\\n            // Define an archaeologist storage object to be stored on the sarcophagus.\\n            bytes32 doubleHashedShard = keccak256(abi.encode(arch.hashedShard));\\n            LibTypes.ArchaeologistStorage memory archaeologistStorage = LibTypes\\n                .ArchaeologistStorage({\\n                    diggingFee: arch.diggingFee,\\n                    bounty: arch.bounty,\\n                    doubleHashedShard: doubleHashedShard,\\n                    unencryptedShard: \\\"\\\"\\n                });\\n\\n            // Map the double-hashed shared to this archaeologist's address for easier referencing on accuse\\n            s.doubleHashedShardArchaeologists[doubleHashedShard] = arch\\n                .archAddress;\\n\\n            // Stores each archaeologist's bounty, digging fees, and unencrypted\\n            // shard in app storage per sarcophagus\\n            s.sarcophagusArchaeologists[sarcoId][\\n                arch.archAddress\\n            ] = archaeologistStorage;\\n\\n            // Add the sarcophagus identifier to archaeologist's list of sarcophagi\\n            s.archaeologistSarcophagi[arch.archAddress].push(sarcoId);\\n\\n            // Add the archaeologist address to the list of addresses to be\\n            // passed in to the sarcophagus object\\n            archaeologistsToBond[i] = arch.archAddress;\\n        }\\n\\n        // If the storage fee is 0, then the storage fee was never set since the\\n        // default value is 0. This means that either the arweave archaeologist\\n        // was not included in the list of archaeologists or the arweave\\n        // archaeologist set their storage fee to 0. In either case the\\n        // transaction should be reverted.\\n        if (storageFee == 0) {\\n            revert LibErrors.ArweaveArchaeologistNotInList();\\n        }\\n\\n        // Create the sarcophagus object and store it in AppStorage\\n        s.sarcophagi[sarcoId] = LibTypes.Sarcophagus({\\n            name: name,\\n            state: LibTypes.SarcophagusState.Exists,\\n            canBeTransferred: canBeTransferred,\\n            minShards: minShards,\\n            resurrectionTime: resurrectionTime,\\n            maxResurrectionInterval: maxResurrectionInterval,\\n            arweaveTxIds: new string[](0),\\n            storageFee: storageFee,\\n            embalmer: msg.sender,\\n            recipientAddress: recipient,\\n            arweaveArchaeologist: arweaveArchaeologist,\\n            archaeologists: archaeologistsToBond\\n        });\\n\\n        // Add the identifier to the necessary data structures\\n        s.sarcophagusIdentifiers.push(sarcoId);\\n        s.embalmerSarcophagi[msg.sender].push(sarcoId);\\n        s.recipientSarcophagi[recipient].push(sarcoId);\\n\\n        // Calculate the total fees in sarco tokens that the contract will\\n        // receive from the embalmer\\n        uint256 totalFees = LibBonds.calculateTotalFees(\\n            sarcoId,\\n            archaeologistsToBond\\n        );\\n\\n        // Transfer the total fees amount in sarco token from the msg.sender to this contract\\n        s.sarcoToken.transferFrom(msg.sender, address(this), totalFees);\\n\\n        // Emit the event\\n        emit InitializeSarcophagus(sarcoId, msg.sender, totalFees);\\n\\n        // Return the index of the sarcophagus\\n        return s.sarcophagusIdentifiers.length - 1;\\n    }\\n\\n    /// @notice Embalmer finalizes the skeleton of a sarcophagus.\\n    ///\\n    /// FinalizeSarcophagus is the last step of the two step mummification\\n    /// process.\\n    ///\\n    /// The purpose of finalizeSarcophagus is to:\\n    ///   - Provide the archaeologists' signatures to the contract. These\\n    ///     confirm that the archaeologists approve the fees stored on the\\n    ///     contract and are ready to work.\\n    ///   - Provide the arweave transaction id to be stored on chain.\\n    ///   - Reward the archaeologist who uploaded to payload to arweave with the storage fee.\\n    ///\\n    /// @dev The archaeologistSignatures must be sent in the same order that the\\n    /// archaeologists were sent to the initializeSarcophagus function,\\n    /// otherwise the transaction will revert.\\n    /// @param sarcoId the identifier of the sarcophagus\\n    /// @param archaeologistSignatures the signatures of the archaeologists.\\n    /// This is archaeologist.length - 1 since the arweave archaeologist will be providing their own signature.\\n    /// @param arweaveArchaeologistSignature the signature of the archaeologist who uploaded to arweave\\n    /// @param arweaveTxId the arweave transaction id\\n    function finalizeSarcophagus(\\n        bytes32 sarcoId,\\n        LibTypes.SignatureWithAccount[] memory archaeologistSignatures,\\n        LibTypes.Signature memory arweaveArchaeologistSignature,\\n        string memory arweaveTxId\\n    ) external {\\n        // Confirm that the sarcophagus exists\\n        if (s.sarcophagi[sarcoId].state != LibTypes.SarcophagusState.Exists) {\\n            revert LibErrors.SarcophagusDoesNotExist(sarcoId);\\n        }\\n\\n        // Confirm that the embalmer is making this transaction\\n        if (s.sarcophagi[sarcoId].embalmer != msg.sender) {\\n            revert LibErrors.SenderNotEmbalmer(\\n                msg.sender,\\n                s.sarcophagi[sarcoId].embalmer\\n            );\\n        }\\n\\n        // Confirm that the sarcophagus is not already finalized by checking if\\n        // the arweaveTxId is empty\\n        if (LibUtils.isSarcophagusFinalized(sarcoId)) {\\n            revert LibErrors.SarcophagusAlreadyFinalized(sarcoId);\\n        }\\n\\n        // Confirm that the provided arweave transaction id is not empty\\n        if (bytes(arweaveTxId).length == 0) {\\n            revert LibErrors.ArweaveTxIdEmpty();\\n        }\\n\\n        // Confirm that the correct number of archaeologist signatures was sent\\n        // This will be archaeologist.length - 1 since the arweave archaeoligist\\n        // will be providing their own signature.\\n        if (\\n            archaeologistSignatures.length !=\\n            s.sarcophagi[sarcoId].archaeologists.length - 1\\n        ) {\\n            revert LibErrors.IncorrectNumberOfArchaeologistSignatures(\\n                archaeologistSignatures.length\\n            );\\n        }\\n\\n        // Iterate over each regular archaeologist signature. This will not\\n        // include the arweave archaeologist.\\n        for (uint256 i = 0; i < archaeologistSignatures.length; i++) {\\n            // Confirm that this signauture has not already been verified. This\\n            // in combination with the signature length check guarantees that\\n            // each archaeologist gets verified and gets verified only once.\\n            if (\\n                verifiedArchaeologists[sarcoId][\\n                    archaeologistSignatures[i].account\\n                ]\\n            ) {\\n                revert LibErrors.SignatureListNotUnique();\\n            }\\n\\n            // Confirm that the archaeologist address in the signature is on the\\n            // sarcophagus. The alternative to this is to iterate over each\\n            // archaeologist on the sarcophagus and run ecrecover to see if\\n            // there is a match. This is much more efficient.\\n            if (\\n                !LibUtils.archaeologistExistsOnSarc(\\n                    sarcoId,\\n                    archaeologistSignatures[i].account\\n                )\\n            ) {\\n                revert LibErrors.ArchaeologistNotOnSarcophagus(\\n                    archaeologistSignatures[i].account\\n                );\\n            }\\n\\n            // Verify that the signature of the sarcophagus identifier came from\\n            // the archaeologist. This signature confirms that the archaeologist\\n            // approves the parameters of the sarcophagus (fees and resurrection\\n            // time) and is ready to work.\\n            LibUtils.verifyBytes32Signature(\\n                sarcoId,\\n                archaeologistSignatures[i].v,\\n                archaeologistSignatures[i].r,\\n                archaeologistSignatures[i].s,\\n                archaeologistSignatures[i].account\\n            );\\n\\n            // Calculates the archaeologist's cursed bond and curses them (locks\\n            // up the free bond)\\n            LibBonds.curseArchaeologist(\\n                sarcoId,\\n                archaeologistSignatures[i].account\\n            );\\n\\n            // Add this archaeologist to the mapping of verified archaeologists\\n            // so that it can't be checked again.\\n            verifiedArchaeologists[sarcoId][\\n                archaeologistSignatures[i].account\\n            ] = true;\\n        }\\n\\n        // Verify that the signature of the arweave transaction id came from the\\n        // arweave archaeologist. This signature confirms that the archaeologist\\n        // approves the parameters of the sarcophagus (fees and resurrection\\n        // time) and is ready to work. The arweave archaeologist's signature in\\n        // particular is also used by the contract to confirm which\\n        // archaeologist uploaded the payload to arweave and should be paid the\\n        // storage fee.\\n        LibUtils.verifyBytesSignature(\\n            bytes(arweaveTxId),\\n            arweaveArchaeologistSignature.v,\\n            arweaveArchaeologistSignature.r,\\n            arweaveArchaeologistSignature.s,\\n            s.sarcophagi[sarcoId].arweaveArchaeologist\\n        );\\n\\n        // Calculates the arweave archaeologist's cursed bond and curses\\n        // them (locks up the free bond)\\n        LibBonds.curseArchaeologist(\\n            sarcoId,\\n            s.sarcophagi[sarcoId].arweaveArchaeologist\\n        );\\n\\n        // Store the arweave transaction id to the sarcophagus. The arweaveTxId\\n        // being populated indirectly designates the sarcophagus as finalized.\\n        s.sarcophagi[sarcoId].arweaveTxIds.push(arweaveTxId);\\n\\n        // Transfer the storage fee to the arweave archaeologist's reward pool\\n        // after setting the arweave transaction id.\\n        // TODO: Discuss, confirm if this is okay:\\n        // Is there value in directly transferring the storage fee to the\\n        // archaeologist on finalise?\\n        LibRewards.increaseRewardPool(\\n            s.sarcophagi[sarcoId].arweaveArchaeologist,\\n            s.sarcophagi[sarcoId].storageFee\\n        );\\n\\n        // Emit an event\\n        emit FinalizeSarcophagus(sarcoId, arweaveTxId);\\n    }\\n\\n    /// @notice The embalmer may extend the life of the sarcophagus as long as\\n    /// the resurrection time has not passed yet.\\n    /// @dev The embalmer sets a new resurrection time sometime in the future.\\n    /// @param sarcoId the identifier of the sarcophagus\\n    /// @param resurrectionTime the new resurrection time\\n    function rewrapSarcophagus(bytes32 sarcoId, uint256 resurrectionTime)\\n        external\\n    {\\n        // Confirm that the sarcophagus exists\\n        if (s.sarcophagi[sarcoId].state != LibTypes.SarcophagusState.Exists) {\\n            revert LibErrors.SarcophagusDoesNotExist(sarcoId);\\n        }\\n\\n        // Confirm that the sender is the embalmer\\n        if (s.sarcophagi[sarcoId].embalmer != msg.sender) {\\n            revert LibErrors.SenderNotEmbalmer(\\n                msg.sender,\\n                s.sarcophagi[sarcoId].embalmer\\n            );\\n        }\\n\\n        // Confirm that the sarcophagus is finalized\\n        if (!LibUtils.isSarcophagusFinalized(sarcoId)) {\\n            revert LibErrors.SarcophagusNotFinalized(sarcoId);\\n        }\\n\\n        // Confirm that the current resurrection time is in the future, and thus rewrappable\\n        if (s.sarcophagi[sarcoId].resurrectionTime <= block.timestamp) {\\n            revert LibErrors.SarcophagusIsUnwrappable();\\n        }\\n\\n        // Confirm that the new resurrection time is in the future\\n        if (resurrectionTime <= block.timestamp) {\\n            revert LibErrors.NewResurrectionTimeInPast(resurrectionTime);\\n        }\\n\\n        // Confirm that the new resurrection time is not more than\\n        // `maxResurrectionInterval` seconds into the future\\n        if (\\n            resurrectionTime - block.timestamp >\\n            s.sarcophagi[sarcoId].maxResurrectionInterval\\n        ) {\\n            revert LibErrors.NewResurrectionTimeTooLarge(\\n                s.sarcophagi[sarcoId].resurrectionTime\\n            );\\n        }\\n\\n        // For each archaeologist on the sarcophagus, transfer their digging fee allocations to them\\n        address[] memory bondedArchaeologists = s\\n            .sarcophagi[sarcoId]\\n            .archaeologists;\\n\\n        uint256 diggingFeeSum = 0;\\n\\n        for (uint256 i = 0; i < bondedArchaeologists.length; i++) {\\n            // Get the archaeolgist's fee data\\n            LibTypes.ArchaeologistStorage memory archaeologistData = LibUtils\\n                .getArchaeologist(sarcoId, bondedArchaeologists[i]);\\n\\n            // Transfer the archaeologist's digging fee allocation to the archaeologist's reward pool\\n            LibRewards.increaseRewardPool(\\n                bondedArchaeologists[i],\\n                archaeologistData.diggingFee\\n            );\\n\\n            // Add the archaeologist's digging fee to the sum\\n            diggingFeeSum += archaeologistData.diggingFee;\\n        }\\n\\n        uint256 protocolFee = LibUtils.calculateProtocolFee();\\n\\n        // Add the protocol fee to the total protocol fees in storage\\n        s.totalProtocolFees += protocolFee;\\n\\n        // Set resurrection time to infinity\\n        s.sarcophagi[sarcoId].resurrectionTime = resurrectionTime;\\n\\n        // Transfer the new digging fees from the embalmer to the sarcophagus contract.\\n        // Archaeologists may withdraw their due from their respective reward pools\\n        s.sarcoToken.transferFrom(\\n            msg.sender,\\n            address(this),\\n            diggingFeeSum + protocolFee\\n        );\\n\\n        // Emit an event\\n        emit RewrapSarcophagus(sarcoId, resurrectionTime);\\n    }\\n\\n    /// @notice Cancels a sarcophagus. An embalmer may cancel a sarcophagus after\\n    /// `initializeSarcophagus` but before `finalizeSarcophagus`. The embalmer's\\n    /// fees that were locked up will be refunded.\\n    /// @param sarcoId the identifier of the sarcophagus\\n    function cancelSarcophagus(bytes32 sarcoId) external {\\n        // Confirm that the sarcophagus exists\\n        if (s.sarcophagi[sarcoId].state != LibTypes.SarcophagusState.Exists) {\\n            revert LibErrors.SarcophagusDoesNotExist(sarcoId);\\n        }\\n\\n        // Confirm that the sender is the embalmer\\n        if (s.sarcophagi[sarcoId].embalmer != msg.sender) {\\n            revert LibErrors.SenderNotEmbalmer(\\n                msg.sender,\\n                s.sarcophagi[sarcoId].embalmer\\n            );\\n        }\\n\\n        // Confirm that the sarcophagus is not already finalized\\n        if (LibUtils.isSarcophagusFinalized(sarcoId)) {\\n            revert LibErrors.SarcophagusAlreadyFinalized(sarcoId);\\n        }\\n\\n        // Set the sarcophagus state to done\\n        s.sarcophagi[sarcoId].state = LibTypes.SarcophagusState.Done;\\n\\n        address[] memory bondedArchaeologists = s\\n            .sarcophagi[sarcoId]\\n            .archaeologists;\\n\\n        // Re-calculate the total fees that the embalmer locked up in initializeSarcophagus\\n        uint256 totalFees = LibBonds.calculateTotalFees(\\n            sarcoId,\\n            bondedArchaeologists\\n        );\\n\\n        // Transfer the total fees back to the embalmer\\n        s.sarcoToken.transfer(s.sarcophagi[sarcoId].embalmer, totalFees);\\n\\n        // Emit an event\\n        emit CancelSarcophagus(sarcoId);\\n    }\\n\\n    /// @notice Permanently closes the sarcophagus, giving it no opportunity to\\n    /// be resurrected.\\n    /// This may only be done after finalizeSarcophagus and before the\\n    /// resurrection time has passed.\\n    /// @dev Extends the resurrection time into infinity so that that unwrap\\n    /// will never be successful.\\n    /// @param sarcoId the identifier of the sarcophagus\\n    function burySarcophagus(bytes32 sarcoId) external {\\n        // Confirm that the sarcophagus exists\\n        if (s.sarcophagi[sarcoId].state != LibTypes.SarcophagusState.Exists) {\\n            revert LibErrors.SarcophagusDoesNotExist(sarcoId);\\n        }\\n\\n        // Confirm that the sender is the embalmer\\n        if (s.sarcophagi[sarcoId].embalmer != msg.sender) {\\n            revert LibErrors.SenderNotEmbalmer(\\n                msg.sender,\\n                s.sarcophagi[sarcoId].embalmer\\n            );\\n        }\\n\\n        // Confirm that the sarcophagus is finalized by checking if there is an\\n        // arweaveTxId\\n        if (!LibUtils.isSarcophagusFinalized(sarcoId)) {\\n            revert LibErrors.SarcophagusNotFinalized(sarcoId);\\n        }\\n\\n        // Confirm that the current resurrection time is in the future\\n        if (s.sarcophagi[sarcoId].resurrectionTime <= block.timestamp) {\\n            revert LibErrors.ResurrectionTimeInPast(\\n                s.sarcophagi[sarcoId].resurrectionTime\\n            );\\n        }\\n\\n        // Set resurrection time to infinity\\n        s.sarcophagi[sarcoId].resurrectionTime = 2**256 - 1;\\n\\n        // Set sarcophagus state to done\\n        s.sarcophagi[sarcoId].state = LibTypes.SarcophagusState.Done;\\n\\n        // Total bounty will be added up when we loop through the\\n        // archaeologists. This will be sent back to the embalmer.\\n        uint256 totalBounty = 0;\\n\\n        // For each archaeologist on the sarcophagus,\\n        // 1. Unlock their cursed bond\\n        // 2. Transfer digging fees to the archaeologist.\\n        address[] memory bondedArchaeologists = s\\n            .sarcophagi[sarcoId]\\n            .archaeologists;\\n\\n        for (uint256 i = 0; i < bondedArchaeologists.length; i++) {\\n            // Unlock the archaeologist's cursed bond\\n            LibBonds.freeArchaeologist(sarcoId, bondedArchaeologists[i]);\\n\\n            LibTypes.ArchaeologistStorage memory archaeologistData = LibUtils\\n                .getArchaeologist(sarcoId, bondedArchaeologists[i]);\\n\\n            // Transfer the digging fees to the archaeologist's reward pool\\n            LibRewards.increaseRewardPool(\\n                bondedArchaeologists[i],\\n                archaeologistData.diggingFee\\n            );\\n\\n            // Add the archaeoogist's bounty to totalBounty\\n            totalBounty += archaeologistData.bounty;\\n        }\\n\\n        // Transfer the total bounty back to the embalmer (msg.sender)\\n        s.sarcoToken.transfer(msg.sender, totalBounty);\\n\\n        // Emit an event\\n        emit BurySarcophagus(sarcoId);\\n    }\\n}\\n\",\"keccak256\":\"0x9ecd4c499e68513a82d3a21ffd4a7d8fdf4111348b6b08fba91093e46903dc95\",\"license\":\"Unlicense\"},\"contracts/libraries/LibBonds.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.13;\\n\\nimport \\\"../storage/LibAppStorage.sol\\\";\\nimport \\\"../libraries/LibTypes.sol\\\";\\nimport {LibErrors} from \\\"../libraries/LibErrors.sol\\\";\\n\\nlibrary LibBonds {\\n    /// @notice Calculates the cursed bond that an archaeologist needs to lock\\n    /// up\\n    /// @dev The cursed bond amount is the sum of the digging fee and the\\n    /// bounty.\\n    /// @param diggingFee The digging fee of the sarcophagus\\n    /// @param bounty The bounty of the sarcophagus\\n    /// @return The amount of cursed bond\\n    function calculateCursedBond(uint256 diggingFee, uint256 bounty)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        // TODO: Implement a better algorithm for calculating the cursed bond\\n        return diggingFee + bounty;\\n    }\\n\\n    /// @notice Decreases the amount stored in the freeBond mapping for an\\n    /// archaeologist. Reverts if the archaeologist's free bond is lower than\\n    /// the amount.\\n    /// @param archaeologist The address of the archaeologist whose\\n    /// free bond is being decreased\\n    /// @param amount The amount to decrease the free bond by\\n    function decreaseFreeBond(address archaeologist, uint256 amount) internal {\\n        AppStorage storage s = LibAppStorage.getAppStorage();\\n\\n        // Revert if the amount is greater than the current free bond\\n        if (amount > s.freeBonds[archaeologist]) {\\n            revert LibErrors.NotEnoughFreeBond(\\n                s.freeBonds[archaeologist],\\n                amount\\n            );\\n        }\\n\\n        // Decrease the free bond amount\\n        s.freeBonds[archaeologist] -= amount;\\n    }\\n\\n    /// @notice Increases the amount stored in the freeBond mapping for an\\n    /// archaeologist.\\n    /// @param archaeologist The address of the archaeologist whose\\n    /// free bond is being decreased\\n    /// @param amount The amount to decrease the free bond by\\n    function increaseFreeBond(address archaeologist, uint256 amount) internal {\\n        AppStorage storage s = LibAppStorage.getAppStorage();\\n\\n        // Increase the free bond amount\\n        s.freeBonds[archaeologist] += amount;\\n    }\\n\\n    /// @notice Decreases the amount stored in the cursedBond mapping for an\\n    /// archaeologist. Reverts if the archaeologist's cursed bond is lower than\\n    /// the amount.\\n    /// @param archaeologist The address of the archaeologist whose\\n    /// cursed bond is being decreased\\n    /// @param amount The amount to decrease the cursed bond by\\n    function decreaseCursedBond(address archaeologist, uint256 amount)\\n        internal\\n    {\\n        AppStorage storage s = LibAppStorage.getAppStorage();\\n\\n        // Revert if the amount is greater than the current cursed bond\\n        if (amount > s.cursedBonds[archaeologist]) {\\n            revert LibErrors.NotEnoughCursedBond(\\n                s.cursedBonds[archaeologist],\\n                amount\\n            );\\n        }\\n\\n        // Decrease the cursed bond amount\\n        s.cursedBonds[archaeologist] -= amount;\\n    }\\n\\n    /// @notice Increases the amount stored in the cursedBond mapping for an\\n    /// archaeologist.\\n    /// @param archaeologist The address of the archaeologist whose\\n    /// cursed bond is being decreased\\n    /// @param amount The amount to decrease the cursed bond by\\n    function increaseCursedBond(address archaeologist, uint256 amount)\\n        internal\\n    {\\n        AppStorage storage s = LibAppStorage.getAppStorage();\\n\\n        // Increase the cursed bond amount\\n        s.cursedBonds[archaeologist] += amount;\\n    }\\n\\n    /// @notice Locks up the archaeologist's bond, decreasing the\\n    /// archaeologist's free bond by an amount and increasing the\\n    /// archaeologist's cursed bond by the same amount.\\n    /// @param archaeologist The address of the archaeologist\\n    /// @param amount The amount to lock up\\n    function lockUpBond(address archaeologist, uint256 amount) internal {\\n        // Decrease the free bond amount\\n        decreaseFreeBond(archaeologist, amount);\\n\\n        // Increase the cursed bond amount\\n        increaseCursedBond(archaeologist, amount);\\n    }\\n\\n    /// @notice Unlocks the archaeologist's bond, increasing the\\n    /// archaeologist's free bond by an amount and decreasing the\\n    /// archaeologist's cursed bond by the same amount.\\n    /// @param archaeologist The address of the archaeologist\\n    /// @param amount The amount to unlock\\n    function unlockBond(address archaeologist, uint256 amount) internal {\\n        // Decrease the cursed bond amount\\n        decreaseCursedBond(archaeologist, amount);\\n\\n        // Increase the free bond amount\\n        increaseFreeBond(archaeologist, amount);\\n    }\\n\\n    /// @notice Given an array of archaeologists on a sarcophagus, sums the total of\\n    /// 1. Each archaeologists' bounty\\n    /// 2. Each archaeologists' digging fees\\n    /// 3. The storage fee\\n    /// @param sarcoId The identifier of the sarcophagus\\n    /// @param archaeologists The array of archaeologists' addresses\\n    /// @return the total of the above\\n    function calculateTotalFees(\\n        bytes32 sarcoId,\\n        address[] memory archaeologists\\n    ) internal view returns (uint256) {\\n        AppStorage storage s = LibAppStorage.getAppStorage();\\n\\n        uint256 totalFees = 0;\\n\\n        // iterate through each archaeologist\\n        for (uint256 i = 0; i < archaeologists.length; i++) {\\n            LibTypes.ArchaeologistStorage memory archaeologistsData = s\\n                .sarcophagusArchaeologists[sarcoId][archaeologists[i]];\\n\\n            // add the archaeologist's bounty to the total fees\\n            totalFees += archaeologistsData.bounty;\\n\\n            // add the archaeologist's digging fee to the total fees\\n            totalFees += archaeologistsData.diggingFee;\\n        }\\n\\n        // add the storage fee to the total fees\\n        totalFees += s.sarcophagi[sarcoId].storageFee;\\n\\n        // return the total fees\\n        return totalFees;\\n    }\\n\\n    /// @notice Calculates an archaeologist's cursed bond and curses them (locks\\n    /// up the free bond).\\n    /// @param sarcoId the identifier of the sarcophagus to bond the archaeologist with\\n    /// @param archaeologist the address of the archaeologist to curse\\n    function curseArchaeologist(bytes32 sarcoId, address archaeologist)\\n        internal\\n    {\\n        AppStorage storage s = LibAppStorage.getAppStorage();\\n\\n        // Get the archaeologist's data from storage\\n        LibTypes.ArchaeologistStorage memory archaeologistData = s\\n            .sarcophagusArchaeologists[sarcoId][archaeologist];\\n\\n        // Calculate the amount of cursed bond the archaeologists needs to lock up\\n        uint256 cursedBondAmount = calculateCursedBond(\\n            archaeologistData.diggingFee,\\n            archaeologistData.bounty\\n        );\\n\\n        // Lock up the archaeologist's bond by the cursed bond amount\\n        lockUpBond(archaeologist, cursedBondAmount);\\n    }\\n\\n    /// @notice Calculates an archaeologist's cursed bond and frees them\\n    /// (unlocks the cursed bond).\\n    /// @param sarcoId the identifier of the sarcophagus to free the archaologist from\\n    /// @param archaeologist the address of the archaeologist to free\\n    function freeArchaeologist(bytes32 sarcoId, address archaeologist)\\n        internal\\n    {\\n        AppStorage storage s = LibAppStorage.getAppStorage();\\n\\n        // Get the archaeologist's data from storage\\n        LibTypes.ArchaeologistStorage memory archaeologistData = s\\n            .sarcophagusArchaeologists[sarcoId][archaeologist];\\n\\n        // Calculate the amount of cursed bond the archaeologists needs to lock up\\n        uint256 cursedBondAmount = calculateCursedBond(\\n            archaeologistData.diggingFee,\\n            archaeologistData.bounty\\n        );\\n\\n        // Lock up the archaeologist's bond by the cursed bond amount\\n        unlockBond(archaeologist, cursedBondAmount);\\n    }\\n}\\n\",\"keccak256\":\"0xc9ad2a70beabd70e04375e8c497f5ea9461250a4ef00c025a39d09e7f7eba06d\",\"license\":\"Unlicense\"},\"contracts/libraries/LibErrors.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.13;\\n\\n/**\\n * @title A collection of Errors\\n * @notice This library defines all of the Errors that the Sarcophagus system\\n * uses.\\n */\\nlibrary LibErrors {\\n    error ArchaeologistAlreadyUnwrapped(address archaeologist);\\n\\n    error ArchaeologistListNotUnique(address[] archaeologists);\\n\\n    error ArchaeologistNotOnSarcophagus(address archaeologist);\\n\\n    error ArweaveArchaeologistNotInList();\\n\\n    error ArweaveTxIdEmpty();\\n\\n    error IncorrectNumberOfArchaeologistSignatures(uint256 signaturesLength);\\n\\n    error MinShardsGreaterThanArchaeologists(uint8 minShards);\\n\\n    error MinShardsZero();\\n\\n    error MaxResurrectionIntervalIsZero();\\n\\n    error NewResurrectionTimeInPast(uint256 newResurrectionTime);\\n\\n    error NewResurrectionTimeTooLarge(uint256 newResurrectionTime);\\n\\n    error NoArchaeologistsProvided();\\n\\n    error NotEnoughCursedBond(uint256 cursedBond, uint256 amount);\\n\\n    error NotEnoughFreeBond(uint256 freeBond, uint256 amount);\\n\\n    error NotEnoughReward(uint256 reward, uint256 amount);\\n\\n    error ResurrectionTimeInPast(uint256 resurrectionTime);\\n\\n    error SarcophagusAlreadyExists(bytes32 sarcoId);\\n\\n    error SarcophagusAlreadyFinalized(bytes32 sarcoId);\\n\\n    error SarcophagusNotFinalized(bytes32 sarcoId);\\n\\n    error SarcophagusDoesNotExist(bytes32 sarcoId);\\n\\n    error SenderNotEmbalmer(address sender, address embalmer);\\n\\n    error SignatureFromWrongAccount(\\n        address hopefulAddress,\\n        address actualAddress\\n    );\\n\\n    error SignatureListNotUnique();\\n\\n    error SignerNotArchaeologistOnSarcophagus(bytes32 sarcoId, address signer);\\n\\n    // Used when an attempt is made to accuse or rewrap after the resurrection time has already passed (so it's actually time to unwrap it)\\n    error SarcophagusIsUnwrappable();\\n\\n    // Used when an attempt is made to clean a sarcophagus that has not exceeded its resurrection window\\n    error SarcophagusNotCleanable();\\n\\n    // Used when accusing with not enough, or invalid, unencrypted shard(s)\\n    error NotEnoughProof();\\n\\n    error TooEarlyToUnwrap(uint256 resurrectionTime, uint256 currentTime);\\n\\n    error TooLateToUnwrap(\\n        uint256 resurrectionTime,\\n        uint256 resurrectionWindow,\\n        uint256 currentTime\\n    );\\n\\n    error UnencryptedShardHashMismatch(\\n        bytes unencryptedShard,\\n        bytes32 doubleHashedShard\\n    );\\n}\\n\",\"keccak256\":\"0x0597f3bebdcc132d73108b89f1e425a8ec9c5da54ae40114caa0823153fd63d7\",\"license\":\"Unlicense\"},\"contracts/libraries/LibRewards.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.13;\\n\\nimport \\\"../storage/LibAppStorage.sol\\\";\\nimport \\\"../libraries/LibTypes.sol\\\";\\nimport {LibErrors} from \\\"../libraries/LibErrors.sol\\\";\\n\\nlibrary LibRewards {\\n    /// @notice Decreases the amount stored in the archaeologistRewards mapping for an\\n    /// archaeologist. Reverts if the archaeologist's reward is lower than\\n    /// the amount. Called on reward withdraw.\\n    /// @param archaeologist The address of the archaeologist whose\\n    /// reward is being decreased\\n    /// @param amount The amount to decrease the reward by\\n    function decreaseRewardPool(address archaeologist, uint256 amount)\\n        internal\\n    {\\n        AppStorage storage s = LibAppStorage.getAppStorage();\\n\\n        // Revert if the amount is greater than the current reward\\n        if (amount > s.archaeologistRewards[archaeologist]) {\\n            revert LibErrors.NotEnoughReward(\\n                s.archaeologistRewards[archaeologist],\\n                amount\\n            );\\n        }\\n\\n        // Decrease the rewards amount\\n        s.archaeologistRewards[archaeologist] -= amount;\\n    }\\n\\n    /// @notice Increases the amount stored in the archaeologistRewards mapping for an\\n    /// archaeologist.\\n    /// @param amount The amount to increase the reward by\\n    /// @param archaeologist The address of the archaeologist whose\\n    /// reward is being increased\\n    function increaseRewardPool(address archaeologist, uint256 amount)\\n        internal\\n    {\\n        AppStorage storage s = LibAppStorage.getAppStorage();\\n\\n        s.archaeologistRewards[archaeologist] += amount;\\n    }\\n}\\n\",\"keccak256\":\"0x79143f99f9755ba51a7d3a4443354275b6d66fd872410aa636b4c5467cb4d835\",\"license\":\"Unlicense\"},\"contracts/libraries/LibTypes.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.13;\\n\\n/**\\n * @title A collection of defined structs\\n * @notice This library defines the various data models that the Sarcophagus\\n * system uses\\n */\\nlibrary LibTypes {\\n    // DoesNotExist must come first on the list to be the default value\\n    enum SarcophagusState {\\n        DoesNotExist,\\n        Exists,\\n        Done\\n    }\\n\\n    // A struct of just the signature. This is used primarily by the\\n    // finalizeSarcpohagus function for the arweave archaeologist. Note that,\\n    // unlike the regular archaeologists, the sarcophagus already stores the\\n    // single arweave archaeologist's address so there is no need to pass in the\\n    // address to the finalizeSarcophagus function.\\n    struct Signature {\\n        uint8 v;\\n        bytes32 r;\\n        bytes32 s;\\n    }\\n\\n    // Signature struct created to make passing in the signature argmuments into\\n    // finalizedSarcophagus easier and to avoid the \\\"stack too deep\\\" error.\\n    // Also attaching arachaeologist addresses so we can tie the signature back\\n    // to the address in finalizeSarcophagus.\\n    struct SignatureWithAccount {\\n        address account;\\n        uint8 v;\\n        bytes32 r;\\n        bytes32 s;\\n    }\\n\\n    // ArchaeologistMemory is the struct that is passed into the\\n    // initializeSarcophagus function. Even though we don't need each storage\\n    // fee of the archaeologist, the storage fee is included in the struct to\\n    // reduce the stack size within the function, preventing the \\\"stack too\\n    // deep\\\" error.\\n    struct ArchaeologistMemory {\\n        address archAddress;\\n        uint256 storageFee;\\n        uint256 diggingFee;\\n        uint256 bounty;\\n        bytes32 hashedShard;\\n    }\\n\\n    // ArchaeologistStorage is the struct that is stored in AppStorage under the\\n    // sarcophagusArchaeologists mapping.\\n    //\\n    // The archaeologist address is left out since each archaeologist's address\\n    // is stored on the sarcophagus object as an array.\\n    //\\n    // The storage fee is left out becuase we only need to store the storage fee\\n    // of the archaeologist uploading to arweave, which will be stored directly\\n    // on the sarcophagus.\\n    struct ArchaeologistStorage {\\n        uint256 diggingFee;\\n        uint256 bounty;\\n        bytes32 doubleHashedShard;\\n        bytes unencryptedShard;\\n    }\\n\\n    // The ArchaeologistStorage struct could be contained in this Sarcophagus\\n    // struct as a mapping, but it was put into it's own mapping\\n    // (sarcophagusArchaeologists) directly in AppStorage. Instead the\\n    // sarcophagus stores the addresses of each archaeologist added to it. This\\n    // was done to simplify the creation of a sarcophagus object in\\n    // initializeSarcophagus.\\n    struct Sarcophagus {\\n        string name;\\n        SarcophagusState state;\\n        bool canBeTransferred;\\n        uint8 minShards;\\n        uint256 resurrectionTime;\\n        uint256 maxResurrectionInterval;\\n        string[] arweaveTxIds;\\n        uint256 storageFee;\\n        address embalmer;\\n        address recipientAddress;\\n        address arweaveArchaeologist;\\n        address[] archaeologists;\\n    }\\n}\\n\",\"keccak256\":\"0x270a916e9f4b256a37342be7aab10069346fbb93a5954a94a2ab509e3a918274\",\"license\":\"Unlicense\"},\"contracts/libraries/LibUtils.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.13;\\n\\nimport \\\"../storage/LibAppStorage.sol\\\";\\nimport \\\"../libraries/LibTypes.sol\\\";\\nimport {LibErrors} from \\\"../libraries/LibErrors.sol\\\";\\n\\n/**\\n * @title Utility functions used within the Sarcophagus system\\n * @notice This library implements various functions that are used throughout\\n * Sarcophagus, mainly to DRY up the codebase\\n * @dev these functions are all stateless, public, pure/view\\n */\\nlibrary LibUtils {\\n    /**\\n     * @notice Reverts if the public key length is not exactly 64 bytes long\\n     * @param publicKey the key to check length of\\n     */\\n    function publicKeyLength(bytes memory publicKey) public pure {\\n        require(publicKey.length == 64, \\\"public key must be 64 bytes\\\");\\n    }\\n\\n    /**\\n     * @notice Reverts if the hash of singleHash does not equal doubleHash\\n     * @param doubleHash the hash to compare hash of singleHash to\\n     * @param singleHash the value to hash and compare against doubleHash\\n     */\\n    function hashCheck(bytes32 doubleHash, bytes memory singleHash)\\n        public\\n        pure\\n    {\\n        require(doubleHash == keccak256(singleHash), \\\"hashes do not match\\\");\\n    }\\n\\n    /**\\n     * @notice Reverts if the input string is not empty\\n     * @param assetId the string to check\\n     */\\n    function confirmAssetIdNotSet(string memory assetId) public pure {\\n        require(bytes(assetId).length == 0, \\\"assetId has already been set\\\");\\n    }\\n\\n    /**\\n     * @notice Reverts if existing assetId is not empty, or if new assetId is\\n     * @param existingAssetId the orignal assetId to check, make sure is empty\\n     * @param newAssetId the new assetId, which must not be empty\\n     */\\n    function assetIdsCheck(\\n        string memory existingAssetId,\\n        string memory newAssetId\\n    ) public pure {\\n        // verify that the existingAssetId is currently empty\\n        confirmAssetIdNotSet(existingAssetId);\\n\\n        require(bytes(newAssetId).length > 0, \\\"assetId must not have 0 length\\\");\\n    }\\n\\n    function archaeologistUnwrappedCheck(bytes32 sarcoId, address archaeologist)\\n        internal\\n        view\\n    {\\n        if (\\n            getArchaeologist(sarcoId, archaeologist).unencryptedShard.length > 0\\n        ) {\\n            revert LibErrors.ArchaeologistAlreadyUnwrapped(archaeologist);\\n        }\\n    }\\n\\n    /**\\n     * @notice Given some bytes32 data, a signature, and an account, verify that the\\n     * identifier was signed by the account.\\n     * @dev The verifyBytes32Signature function is identical to the\\n     * verifyBytesSignature function except for the data type being passed in.\\n     * The reason these are split up is beacuse it's really tricky to convert a\\n     * bytes32 value into a bytes value and have ecrecover still work properly.\\n     * If a simple solution can be found for this problem then please combine\\n     * these two functions together.\\n     * @param data the data to verify\\n     * @param v signature element\\n     * @param r signature element\\n     * @param s signature element\\n     * @param account address to confirm data and signature came from\\n     */\\n    function verifyBytes32Signature(\\n        bytes32 data,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s,\\n        address account\\n    ) internal pure {\\n        // Hash the hash of the data payload\\n        bytes32 messageHash = keccak256(\\n            abi.encodePacked(\\n                \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\",\\n                keccak256(abi.encode(data))\\n            )\\n        );\\n\\n        // Genearate the address from the signature.\\n        // ecrecover should always return a valid address.\\n        address hopefulAddress = ecrecover(messageHash, v, r, s);\\n\\n        if (hopefulAddress != account) {\\n            revert LibErrors.SignatureFromWrongAccount(hopefulAddress, account);\\n        }\\n    }\\n\\n    /**\\n     * @notice Given an identifier, a signature, and an account, verify that the\\n     * identifier was signed by the account.\\n     * @dev The verifyBytes32Signature function is identical to the\\n     * verifyBytesSignature function except for the data type being passed in.\\n     * The reason these are split up is beacuse it's really tricky to convert a\\n     * bytes32 value into a bytes value and have ecrecover still work properly.\\n     * If a simple solution can be found for this problem then please combine\\n     * these two functions together.\\n     * @param data the data to verify\\n     * @param v signature element\\n     * @param r signature element\\n     * @param s signature element\\n     * @param account address to confirm data and signature came from\\n     */\\n    function verifyBytesSignature(\\n        bytes memory data,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s,\\n        address account\\n    ) internal pure {\\n        // Hash the hash of the data payload\\n        bytes32 messageHash = keccak256(\\n            abi.encodePacked(\\n                \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\",\\n                keccak256(abi.encode(data))\\n            )\\n        );\\n\\n        // Genearate the address from the signature.\\n        // ecrecover should always return a valid address.\\n        // It's highly recommended that a hash be passed into ecrecover\\n        address hopefulAddress = ecrecover(messageHash, v, r, s);\\n\\n        if (hopefulAddress != account) {\\n            revert LibErrors.SignatureFromWrongAccount(hopefulAddress, account);\\n        }\\n    }\\n\\n    /// @notice Returns the address that signed some data given the data and the\\n    /// signature.\\n    /// @param data the data to verify\\n    /// @param v signature element\\n    /// @param r signature element\\n    /// @param s signature element\\n    /// @return the address that signed the data\\n    function recoverAddress(\\n        bytes memory data,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        // Hash the hash of the data payload\\n        bytes32 messageHash = keccak256(\\n            abi.encodePacked(\\n                \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\",\\n                keccak256(abi.encode(data))\\n            )\\n        );\\n\\n        // Genearate the address from the signature.\\n        // ecrecover should always return a valid address.\\n        // It's highly recommended that a hash be passed into ecrecover\\n        address account = ecrecover(messageHash, v, r, s);\\n\\n        return account;\\n    }\\n\\n    /**\\n     * @notice Reverts if the given resurrection time is not in the future\\n     * @param resurrectionTime the time to check against block.timestamp\\n     */\\n    function resurrectionInFuture(uint256 resurrectionTime) internal view {\\n        if (resurrectionTime <= block.timestamp) {\\n            revert LibErrors.ResurrectionTimeInPast(resurrectionTime);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates the grace period that an archaeologist has after a\\n     * sarcophagus has reached its resurrection time\\n     * @param resurrectionTime the resurrection timestamp of a sarcophagus\\n     * @return the grace period\\n     * @dev The grace period is dependent on how far out the resurrection time\\n     * is. The longer out the resurrection time, the longer the grace period.\\n     * There is a minimum grace period of 30 minutes, otherwise, it's\\n     * calculated as 1% of the time between now and resurrection time.\\n     */\\n    function getGracePeriod(uint256 resurrectionTime)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        // set a minimum window of 30 minutes\\n        uint16 minimumResurrectionWindow = 30 minutes;\\n\\n        // calculate 1% of the relative time between now and the resurrection\\n        // time\\n        uint256 gracePeriod = (\\n            resurrectionTime > block.timestamp\\n                ? resurrectionTime - block.timestamp\\n                : block.timestamp - resurrectionTime\\n        ) / 100;\\n\\n        // if our calculated grace period is less than the minimum time, we'll\\n        // use the minimum time instead\\n        if (gracePeriod < minimumResurrectionWindow) {\\n            gracePeriod = minimumResurrectionWindow;\\n        }\\n\\n        // return that grace period\\n        return gracePeriod;\\n    }\\n\\n    /**\\n     * @notice Reverts if we're not within the resurrection window (on either\\n     * side)\\n     * @param resurrectionTime the resurrection time of the sarcophagus\\n     * (absolute, i.e. a date time stamp)\\n     */\\n    function unwrapTime(uint256 resurrectionTime) internal view {\\n        // revert if too early\\n        if (resurrectionTime > block.timestamp) {\\n            revert LibErrors.TooEarlyToUnwrap(\\n                resurrectionTime,\\n                block.timestamp\\n            );\\n        }\\n\\n        uint256 resurrectionWindow = getGracePeriod(resurrectionTime);\\n\\n        // revert if too late\\n        if (resurrectionTime + resurrectionWindow < block.timestamp) {\\n            revert LibErrors.TooLateToUnwrap(\\n                resurrectionTime,\\n                resurrectionWindow,\\n                block.timestamp\\n            );\\n        }\\n    }\\n\\n    /// @notice Checks if the archaeologist exists on the sarcophagus.\\n    /// @param sarcoId the identifier of the sarcophagus\\n    /// @param archaeologist the address of the archaeologist\\n    /// @return The boolean true if the archaeologist exists on the sarcophagus\\n    function archaeologistExistsOnSarc(bytes32 sarcoId, address archaeologist)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        AppStorage storage s = LibAppStorage.getAppStorage();\\n\\n        // If the doubleHashedShard on an archaeologist is 0 (which is its default value),\\n        // then the archaeologist doesn't exist on the sarcophagus\\n        return\\n            s\\n            .sarcophagusArchaeologists[sarcoId][archaeologist]\\n                .doubleHashedShard != 0;\\n    }\\n\\n    /// @notice Gets an archaeologist given the sarcophagus identifier and the\\n    /// archaeologist's address.\\n    /// @param sarcoId the identifier of the sarcophagus\\n    /// @param archaeologist the address of the archaeologist\\n    /// @return The archaeologist\\n    function getArchaeologist(bytes32 sarcoId, address archaeologist)\\n        internal\\n        view\\n        returns (LibTypes.ArchaeologistStorage memory)\\n    {\\n        AppStorage storage s = LibAppStorage.getAppStorage();\\n\\n        return s.sarcophagusArchaeologists[sarcoId][archaeologist];\\n    }\\n\\n    /// @notice Checks if a sarcophagus has been finalized by checking if it\\n    /// contains any arweaveTxIds.\\n    /// @param sarcoId the identifier of the sarcophagus\\n    /// @return The boolean true if the sarcophagus has been finalized\\n    function isSarcophagusFinalized(bytes32 sarcoId)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        AppStorage storage s = LibAppStorage.getAppStorage();\\n\\n        return s.sarcophagi[sarcoId].arweaveTxIds.length > 0;\\n    }\\n\\n    /// @notice Calculates the protocol fees to be taken from the embalmer.\\n    /// @return The protocol fees amount\\n    function calculateProtocolFee() internal view returns (uint256) {\\n        AppStorage storage s = LibAppStorage.getAppStorage();\\n\\n        // TODO: Need feedback from the community to determine how protocol fees should be calculated\\n        // Just returns a constant value defined in an env file\\n        return s.protocolFee;\\n    }\\n}\\n\",\"keccak256\":\"0x7c7ad6e6c87850b6b79dc2f3cacec14cda233ce71c4fee63745c00910073e484\",\"license\":\"Unlicense\"},\"contracts/storage/LibAppStorage.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../libraries/LibTypes.sol\\\";\\n\\n// Global storage for the app. Can be accessed in facets and in libraries\\nstruct AppStorage {\\n    IERC20 sarcoToken;\\n    // The amount to be taken from the embalmer each time a protocol fee should\\n    // be collected\\n    uint256 protocolFee;\\n    // The amount of protocol fees currently stored on the contract\\n    uint256 totalProtocolFees;\\n    // sarcophagi\\n    bytes32[] sarcophagusIdentifiers;\\n    // Each archaeologist's total free and cursed bonds\\n    mapping(address => uint256) freeBonds;\\n    mapping(address => uint256) cursedBonds;\\n    // archaeologist stats\\n    mapping(address => mapping(bytes32 => bool)) archaeologistSuccesses;\\n    mapping(address => bytes32[]) archaeologistCancels;\\n    mapping(address => bytes32[]) archaeologistAccusals;\\n    mapping(address => bytes32[]) archaeologistCleanups;\\n    // Track how much archaeologists have made. To be credited and debited\\n    // as archaeologists fulfil their duties and withdraw their rewards\\n    mapping(address => uint256) archaeologistRewards;\\n    mapping(bytes32 => LibTypes.Sarcophagus) sarcophagi;\\n    // sarcophagus ownerships\\n    mapping(address => bytes32[]) embalmerSarcophagi;\\n    mapping(address => bytes32[]) archaeologistSarcophagi;\\n    mapping(address => bytes32[]) recipientSarcophagi;\\n    // Mapping of unencrypted shard double hashes to archaeologists who are\\n    // responsible for them. Needed to optimise Accuse algo - unencrypted shard is\\n    // double hashed and used as a constant O(1) lookup here\\n    mapping(bytes32 => address) doubleHashedShardArchaeologists;\\n    // A mapping used to store an archaeologist's data on a sarcophagus.\\n    // Bounty, digging fees, storage fees, and the hashed shards of the\\n    // archaeologists all need to be stored per sarcophagus. This mapping of a\\n    // mapping stores the archaeologist's data we need per sarcophagus.\\n    // Example usage (to retrieve the bounty an archaeologist may claim on some sarcophagus):\\n    //   LibTypes.ArchaeologistStorage bondedArchaeologist = sarcophagusArchaeologists[sarcoId][archAddress];\\n    //   uint256 bounty = bondedArchaeologist.bounty;\\n    mapping(bytes32 => mapping(address => LibTypes.ArchaeologistStorage)) sarcophagusArchaeologists;\\n}\\n\\nlibrary LibAppStorage {\\n    function getAppStorage() internal pure returns (AppStorage storage s) {\\n        // Set the position of our struct in contract storage\\n        // Since AppStorage s is the first and only state variable declared in\\n        // facets its position in contract storage is 0\\n        assembly {\\n            s.slot := 0\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x367d92e27c7e659b0700d9b43046571d4a3f3942336070687d81b302385dd4cf\",\"license\":\"Unlicense\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "burySarcophagus(bytes32)": {
        "details": "Extends the resurrection time into infinity so that that unwrap will never be successful.",
        "params": {
          "sarcoId": "the identifier of the sarcophagus"
        }
      },
      "cancelSarcophagus(bytes32)": {
        "params": {
          "sarcoId": "the identifier of the sarcophagus"
        }
      },
      "finalizeSarcophagus(bytes32,(address,uint8,bytes32,bytes32)[],(uint8,bytes32,bytes32),string)": {
        "details": "The archaeologistSignatures must be sent in the same order that the archaeologists were sent to the initializeSarcophagus function, otherwise the transaction will revert.",
        "params": {
          "archaeologistSignatures": "the signatures of the archaeologists. This is archaeologist.length - 1 since the arweave archaeologist will be providing their own signature.",
          "arweaveArchaeologistSignature": "the signature of the archaeologist who uploaded to arweave",
          "arweaveTxId": "the arweave transaction id",
          "sarcoId": "the identifier of the sarcophagus"
        }
      },
      "initializeSarcophagus(string,(address,uint256,uint256,uint256,bytes32)[],address,address,uint256,uint256,bool,uint8,bytes32)": {
        "details": "archaeologists will have to sign off on this interval, and commit to it for the lifetime of the sarcophagus.",
        "params": {
          "archaeologists": "the data for the archaeologists",
          "arweaveArchaeologist": "The address of the archaeologist who uploads to arweave",
          "canBeTransferred": "Whether the sarcophagus can be transferred",
          "maxResurrectionInterval": "the maximum length of time that any new resurrection times can be from time of rewrap",
          "minShards": "The minimum number of shards required to unwrap the sarcophagus",
          "name": "the name of the sarcophagus",
          "recipient": "the address of the recipient",
          "resurrectionTime": "the resurrection time of the sarcophagus",
          "sarcoId": "Unique identifier of the sarcophagus"
        },
        "returns": {
          "_0": "The index of the new sarcophagus"
        }
      },
      "rewrapSarcophagus(bytes32,uint256)": {
        "details": "The embalmer sets a new resurrection time sometime in the future.",
        "params": {
          "resurrectionTime": "the new resurrection time",
          "sarcoId": "the identifier of the sarcophagus"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "burySarcophagus(bytes32)": {
        "notice": "Permanently closes the sarcophagus, giving it no opportunity to be resurrected. This may only be done after finalizeSarcophagus and before the resurrection time has passed."
      },
      "cancelSarcophagus(bytes32)": {
        "notice": "Cancels a sarcophagus. An embalmer may cancel a sarcophagus after `initializeSarcophagus` but before `finalizeSarcophagus`. The embalmer's fees that were locked up will be refunded."
      },
      "finalizeSarcophagus(bytes32,(address,uint8,bytes32,bytes32)[],(uint8,bytes32,bytes32),string)": {
        "notice": "Embalmer finalizes the skeleton of a sarcophagus. FinalizeSarcophagus is the last step of the two step mummification process. The purpose of finalizeSarcophagus is to:   - Provide the archaeologists' signatures to the contract. These     confirm that the archaeologists approve the fees stored on the     contract and are ready to work.   - Provide the arweave transaction id to be stored on chain.   - Reward the archaeologist who uploaded to payload to arweave with the storage fee."
      },
      "initializeSarcophagus(string,(address,uint256,uint256,uint256,bytes32)[],address,address,uint256,uint256,bool,uint8,bytes32)": {
        "notice": "Embalmer creates the skeleton for a new sarcopahgus. InitializeSarcophagus is the first step of the two step mummification process. The purpose of intializeSarcophagus is to:   - Lock up payment for the archaeologists (bounty, digging fees, and storage fee)   - Store hashes of the unencrypted shards on chain   - Store the particapting archaeologists' addresses and individual     denominations of fees dedicated to each   - Create the sarcophagus object After initializeSarcophagus the archaeologists have been chosen but may have no knowledge of the sarcophagus yet. An archaeologist still needs to upload a payload to arweave and also communicate directly with the embalmer to indicate that they are ready to do work. After this the finalizeSarcohpagus() method should be called, which is the second step."
      },
      "rewrapSarcophagus(bytes32,uint256)": {
        "notice": "The embalmer may extend the life of the sarcophagus as long as the resurrection time has not passed yet."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 94,
        "contract": "contracts/facets/EmbalmerFacet.sol:EmbalmerFacet",
        "label": "s",
        "offset": 0,
        "slot": "0",
        "type": "t_struct(AppStorage)2351_storage"
      },
      {
        "astId": 128,
        "contract": "contracts/facets/EmbalmerFacet.sol:EmbalmerFacet",
        "label": "verifiedArchaeologists",
        "offset": 0,
        "slot": "17",
        "type": "t_mapping(t_bytes32,t_mapping(t_address,t_bool))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_string_storage)dyn_storage": {
        "base": "t_string_storage",
        "encoding": "dynamic_array",
        "label": "string[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20)77": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_enum(SarcophagusState)1755": {
        "encoding": "inplace",
        "label": "enum LibTypes.SarcophagusState",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_array(t_bytes32)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bytes32[])",
        "numberOfBytes": "32",
        "value": "t_array(t_bytes32)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_bytes32,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(bytes32 => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bytes32,t_bool)"
      },
      "t_mapping(t_address,t_struct(ArchaeologistStorage)1791_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct LibTypes.ArchaeologistStorage)",
        "numberOfBytes": "32",
        "value": "t_struct(ArchaeologistStorage)1791_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_address)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_bytes32,t_mapping(t_address,t_struct(ArchaeologistStorage)1791_storage))": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => mapping(address => struct LibTypes.ArchaeologistStorage))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(ArchaeologistStorage)1791_storage)"
      },
      "t_mapping(t_bytes32,t_struct(Sarcophagus)1819_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct LibTypes.Sarcophagus)",
        "numberOfBytes": "32",
        "value": "t_struct(Sarcophagus)1819_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AppStorage)2351_storage": {
        "encoding": "inplace",
        "label": "struct AppStorage",
        "members": [
          {
            "astId": 2279,
            "contract": "contracts/facets/EmbalmerFacet.sol:EmbalmerFacet",
            "label": "sarcoToken",
            "offset": 0,
            "slot": "0",
            "type": "t_contract(IERC20)77"
          },
          {
            "astId": 2281,
            "contract": "contracts/facets/EmbalmerFacet.sol:EmbalmerFacet",
            "label": "protocolFee",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 2283,
            "contract": "contracts/facets/EmbalmerFacet.sol:EmbalmerFacet",
            "label": "totalProtocolFees",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 2286,
            "contract": "contracts/facets/EmbalmerFacet.sol:EmbalmerFacet",
            "label": "sarcophagusIdentifiers",
            "offset": 0,
            "slot": "3",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 2290,
            "contract": "contracts/facets/EmbalmerFacet.sol:EmbalmerFacet",
            "label": "freeBonds",
            "offset": 0,
            "slot": "4",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 2294,
            "contract": "contracts/facets/EmbalmerFacet.sol:EmbalmerFacet",
            "label": "cursedBonds",
            "offset": 0,
            "slot": "5",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 2300,
            "contract": "contracts/facets/EmbalmerFacet.sol:EmbalmerFacet",
            "label": "archaeologistSuccesses",
            "offset": 0,
            "slot": "6",
            "type": "t_mapping(t_address,t_mapping(t_bytes32,t_bool))"
          },
          {
            "astId": 2305,
            "contract": "contracts/facets/EmbalmerFacet.sol:EmbalmerFacet",
            "label": "archaeologistCancels",
            "offset": 0,
            "slot": "7",
            "type": "t_mapping(t_address,t_array(t_bytes32)dyn_storage)"
          },
          {
            "astId": 2310,
            "contract": "contracts/facets/EmbalmerFacet.sol:EmbalmerFacet",
            "label": "archaeologistAccusals",
            "offset": 0,
            "slot": "8",
            "type": "t_mapping(t_address,t_array(t_bytes32)dyn_storage)"
          },
          {
            "astId": 2315,
            "contract": "contracts/facets/EmbalmerFacet.sol:EmbalmerFacet",
            "label": "archaeologistCleanups",
            "offset": 0,
            "slot": "9",
            "type": "t_mapping(t_address,t_array(t_bytes32)dyn_storage)"
          },
          {
            "astId": 2319,
            "contract": "contracts/facets/EmbalmerFacet.sol:EmbalmerFacet",
            "label": "archaeologistRewards",
            "offset": 0,
            "slot": "10",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 2324,
            "contract": "contracts/facets/EmbalmerFacet.sol:EmbalmerFacet",
            "label": "sarcophagi",
            "offset": 0,
            "slot": "11",
            "type": "t_mapping(t_bytes32,t_struct(Sarcophagus)1819_storage)"
          },
          {
            "astId": 2329,
            "contract": "contracts/facets/EmbalmerFacet.sol:EmbalmerFacet",
            "label": "embalmerSarcophagi",
            "offset": 0,
            "slot": "12",
            "type": "t_mapping(t_address,t_array(t_bytes32)dyn_storage)"
          },
          {
            "astId": 2334,
            "contract": "contracts/facets/EmbalmerFacet.sol:EmbalmerFacet",
            "label": "archaeologistSarcophagi",
            "offset": 0,
            "slot": "13",
            "type": "t_mapping(t_address,t_array(t_bytes32)dyn_storage)"
          },
          {
            "astId": 2339,
            "contract": "contracts/facets/EmbalmerFacet.sol:EmbalmerFacet",
            "label": "recipientSarcophagi",
            "offset": 0,
            "slot": "14",
            "type": "t_mapping(t_address,t_array(t_bytes32)dyn_storage)"
          },
          {
            "astId": 2343,
            "contract": "contracts/facets/EmbalmerFacet.sol:EmbalmerFacet",
            "label": "doubleHashedShardArchaeologists",
            "offset": 0,
            "slot": "15",
            "type": "t_mapping(t_bytes32,t_address)"
          },
          {
            "astId": 2350,
            "contract": "contracts/facets/EmbalmerFacet.sol:EmbalmerFacet",
            "label": "sarcophagusArchaeologists",
            "offset": 0,
            "slot": "16",
            "type": "t_mapping(t_bytes32,t_mapping(t_address,t_struct(ArchaeologistStorage)1791_storage))"
          }
        ],
        "numberOfBytes": "544"
      },
      "t_struct(ArchaeologistStorage)1791_storage": {
        "encoding": "inplace",
        "label": "struct LibTypes.ArchaeologistStorage",
        "members": [
          {
            "astId": 1784,
            "contract": "contracts/facets/EmbalmerFacet.sol:EmbalmerFacet",
            "label": "diggingFee",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1786,
            "contract": "contracts/facets/EmbalmerFacet.sol:EmbalmerFacet",
            "label": "bounty",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 1788,
            "contract": "contracts/facets/EmbalmerFacet.sol:EmbalmerFacet",
            "label": "doubleHashedShard",
            "offset": 0,
            "slot": "2",
            "type": "t_bytes32"
          },
          {
            "astId": 1790,
            "contract": "contracts/facets/EmbalmerFacet.sol:EmbalmerFacet",
            "label": "unencryptedShard",
            "offset": 0,
            "slot": "3",
            "type": "t_bytes_storage"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(Sarcophagus)1819_storage": {
        "encoding": "inplace",
        "label": "struct LibTypes.Sarcophagus",
        "members": [
          {
            "astId": 1793,
            "contract": "contracts/facets/EmbalmerFacet.sol:EmbalmerFacet",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 1796,
            "contract": "contracts/facets/EmbalmerFacet.sol:EmbalmerFacet",
            "label": "state",
            "offset": 0,
            "slot": "1",
            "type": "t_enum(SarcophagusState)1755"
          },
          {
            "astId": 1798,
            "contract": "contracts/facets/EmbalmerFacet.sol:EmbalmerFacet",
            "label": "canBeTransferred",
            "offset": 1,
            "slot": "1",
            "type": "t_bool"
          },
          {
            "astId": 1800,
            "contract": "contracts/facets/EmbalmerFacet.sol:EmbalmerFacet",
            "label": "minShards",
            "offset": 2,
            "slot": "1",
            "type": "t_uint8"
          },
          {
            "astId": 1802,
            "contract": "contracts/facets/EmbalmerFacet.sol:EmbalmerFacet",
            "label": "resurrectionTime",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 1804,
            "contract": "contracts/facets/EmbalmerFacet.sol:EmbalmerFacet",
            "label": "maxResurrectionInterval",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 1807,
            "contract": "contracts/facets/EmbalmerFacet.sol:EmbalmerFacet",
            "label": "arweaveTxIds",
            "offset": 0,
            "slot": "4",
            "type": "t_array(t_string_storage)dyn_storage"
          },
          {
            "astId": 1809,
            "contract": "contracts/facets/EmbalmerFacet.sol:EmbalmerFacet",
            "label": "storageFee",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 1811,
            "contract": "contracts/facets/EmbalmerFacet.sol:EmbalmerFacet",
            "label": "embalmer",
            "offset": 0,
            "slot": "6",
            "type": "t_address"
          },
          {
            "astId": 1813,
            "contract": "contracts/facets/EmbalmerFacet.sol:EmbalmerFacet",
            "label": "recipientAddress",
            "offset": 0,
            "slot": "7",
            "type": "t_address"
          },
          {
            "astId": 1815,
            "contract": "contracts/facets/EmbalmerFacet.sol:EmbalmerFacet",
            "label": "arweaveArchaeologist",
            "offset": 0,
            "slot": "8",
            "type": "t_address"
          },
          {
            "astId": 1818,
            "contract": "contracts/facets/EmbalmerFacet.sol:EmbalmerFacet",
            "label": "archaeologists",
            "offset": 0,
            "slot": "9",
            "type": "t_array(t_address)dyn_storage"
          }
        ],
        "numberOfBytes": "320"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}