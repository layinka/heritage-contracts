{
  "address": "0xa25F85259b7c0638d06a66370917C6b45D7a3273",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "archaeologist",
          "type": "address"
        }
      ],
      "name": "getArchaeologistAccusals",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "archaeologist",
          "type": "address"
        }
      ],
      "name": "getArchaeologistCleanups",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "archaeologist",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "sarcoId",
          "type": "bytes32"
        }
      ],
      "name": "getArchaeologistSuccessOnSarcophagus",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "archaeologist",
          "type": "address"
        }
      ],
      "name": "getArchaeologistsarcophagi",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "archaeologist",
          "type": "address"
        }
      ],
      "name": "getAvailableRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "archaeologist",
          "type": "address"
        }
      ],
      "name": "getCursedBond",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "embalmer",
          "type": "address"
        }
      ],
      "name": "getEmbalmersarcophagi",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "archaeologist",
          "type": "address"
        }
      ],
      "name": "getFreeBond",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getProtocolFeeAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "getRecipientsarcophagi",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "sarcoId",
          "type": "bytes32"
        }
      ],
      "name": "getSarcophagus",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "enum LibTypes.SarcophagusState",
              "name": "state",
              "type": "uint8"
            },
            {
              "internalType": "bool",
              "name": "canBeTransferred",
              "type": "bool"
            },
            {
              "internalType": "uint8",
              "name": "minShards",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "resurrectionTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxResurrectionInterval",
              "type": "uint256"
            },
            {
              "internalType": "string[]",
              "name": "arweaveTxIds",
              "type": "string[]"
            },
            {
              "internalType": "uint256",
              "name": "storageFee",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "embalmer",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "recipientAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "arweaveArchaeologist",
              "type": "address"
            },
            {
              "internalType": "address[]",
              "name": "archaeologists",
              "type": "address[]"
            }
          ],
          "internalType": "struct LibTypes.Sarcophagus",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "sarcoId",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "archaeologist",
          "type": "address"
        }
      ],
      "name": "getSarcophagusArchaeologist",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "diggingFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "bounty",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "doubleHashedShard",
              "type": "bytes32"
            },
            {
              "internalType": "bytes",
              "name": "unencryptedShard",
              "type": "bytes"
            }
          ],
          "internalType": "struct LibTypes.ArchaeologistStorage",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTotalProtocolFees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "4657a8166706ac1f0ed35a951814704b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"archaeologist\",\"type\":\"address\"}],\"name\":\"getArchaeologistAccusals\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"archaeologist\",\"type\":\"address\"}],\"name\":\"getArchaeologistCleanups\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"archaeologist\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"sarcoId\",\"type\":\"bytes32\"}],\"name\":\"getArchaeologistSuccessOnSarcophagus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"archaeologist\",\"type\":\"address\"}],\"name\":\"getArchaeologistsarcophagi\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"archaeologist\",\"type\":\"address\"}],\"name\":\"getAvailableRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"archaeologist\",\"type\":\"address\"}],\"name\":\"getCursedBond\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"embalmer\",\"type\":\"address\"}],\"name\":\"getEmbalmersarcophagi\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"archaeologist\",\"type\":\"address\"}],\"name\":\"getFreeBond\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getProtocolFeeAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"getRecipientsarcophagi\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"sarcoId\",\"type\":\"bytes32\"}],\"name\":\"getSarcophagus\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"enum LibTypes.SarcophagusState\",\"name\":\"state\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"canBeTransferred\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"minShards\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"resurrectionTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxResurrectionInterval\",\"type\":\"uint256\"},{\"internalType\":\"string[]\",\"name\":\"arweaveTxIds\",\"type\":\"string[]\"},{\"internalType\":\"uint256\",\"name\":\"storageFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"embalmer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipientAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"arweaveArchaeologist\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"archaeologists\",\"type\":\"address[]\"}],\"internalType\":\"struct LibTypes.Sarcophagus\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"sarcoId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"archaeologist\",\"type\":\"address\"}],\"name\":\"getSarcophagusArchaeologist\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"diggingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bounty\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"doubleHashedShard\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"unencryptedShard\",\"type\":\"bytes\"}],\"internalType\":\"struct LibTypes.ArchaeologistStorage\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalProtocolFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getArchaeologistAccusals(address)\":{\"params\":{\"archaeologist\":\"The address of the archaeologist whose accusations are being returned\"}},\"getArchaeologistCleanups(address)\":{\"params\":{\"archaeologist\":\"The address of the archaeologist whose cleanups are being returned\"}},\"getArchaeologistsarcophagi(address)\":{\"params\":{\"archaeologist\":\"The address of the archaeologist whose sarcophagi are being returned\"}},\"getAvailableRewards(address)\":{\"params\":{\"archaeologist\":\"The address of the archaeologist whose reward is being returned\"}},\"getCursedBond(address)\":{\"params\":{\"archaeologist\":\"The address of the archaeologist whose cursed bond is being returned\"}},\"getEmbalmersarcophagi(address)\":{\"params\":{\"embalmer\":\"The address of the embalmer whose sarcophagi are being returned\"}},\"getFreeBond(address)\":{\"params\":{\"archaeologist\":\"The address of the archaeologist whose free bond is being returned\"}},\"getProtocolFeeAmount()\":{\"returns\":{\"_0\":\"The protocol fee amount\"}},\"getRecipientsarcophagi(address)\":{\"params\":{\"recipient\":\"The address of the recipient whose sarcophagi are being returned\"}},\"getSarcophagus(bytes32)\":{\"params\":{\"sarcoId\":\"The identifier of the sarcophagus being returned\"}},\"getSarcophagusArchaeologist(bytes32,address)\":{\"params\":{\"archaeologist\":\"The address of the archaeologist whose data is being returned\",\"sarcoId\":\"The identifier of the sarcophagus whose data is being returned\"}},\"getTotalProtocolFees()\":{\"returns\":{\"_0\":\"The total protocol fees\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getArchaeologistAccusals(address)\":{\"notice\":\"Returns the number of accusations for an archaeologist.\"},\"getArchaeologistCleanups(address)\":{\"notice\":\"Returns the number of cleanups for an archaeologist.\"},\"getArchaeologistsarcophagi(address)\":{\"notice\":\"Given an archaeologist's address, returns the identifiers of all sarcophagi that the archaeologist has participated in.\"},\"getAvailableRewards(address)\":{\"notice\":\"Returns the amount of rewards stored in the contract for an archaeologist.\"},\"getCursedBond(address)\":{\"notice\":\"Returns the amount of cursed bond stored in the contract for an archaeologist.\"},\"getEmbalmersarcophagi(address)\":{\"notice\":\"Given an embalmer's address, returns the identifiers of all sarcophagi that the embalmer has created.\"},\"getFreeBond(address)\":{\"notice\":\"Returns the amount of free bond stored in the contract for an archaeologist.\"},\"getProtocolFeeAmount()\":{\"notice\":\"Get the protocol fee amount from the contract.\"},\"getRecipientsarcophagi(address)\":{\"notice\":\"Given a recipient's address, returns the identifiers of all sarcophagi that the recipient has participated in.\"},\"getSarcophagus(bytes32)\":{\"notice\":\"Returns a sarcophagus.\"},\"getSarcophagusArchaeologist(bytes32,address)\":{\"notice\":\"Returns the data stored on a sarcophagus for an archaeologist.\"},\"getTotalProtocolFees()\":{\"notice\":\"Gets the total protocol fees from the contract.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/facets/ViewStateFacet.sol\":\"ViewStateFacet\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"contracts/facets/ViewStateFacet.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.13;\\n\\nimport \\\"../libraries/LibTypes.sol\\\";\\nimport {AppStorage} from \\\"../storage/LibAppStorage.sol\\\";\\n\\ncontract ViewStateFacet {\\n    AppStorage internal s;\\n\\n    /// @notice Gets the total protocol fees from the contract.\\n    /// @return The total protocol fees\\n    function getTotalProtocolFees() external view returns (uint256) {\\n        return s.totalProtocolFees;\\n    }\\n\\n    /// @notice Get the protocol fee amount from the contract.\\n    /// @return The protocol fee amount\\n    function getProtocolFeeAmount() external view returns (uint256) {\\n        return s.protocolFee;\\n    }\\n\\n    /// @notice Returns the amount of free bond stored in the contract for an\\n    /// archaeologist.\\n    /// @param archaeologist The address of the archaeologist whose\\n    /// free bond is being returned\\n    function getFreeBond(address archaeologist)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return s.freeBonds[archaeologist];\\n    }\\n\\n    /// @notice Returns the amount of rewards stored in the contract for an\\n    /// archaeologist.\\n    /// @param archaeologist The address of the archaeologist whose\\n    /// reward is being returned\\n    function getAvailableRewards(address archaeologist)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return s.archaeologistRewards[archaeologist];\\n    }\\n\\n    /// @notice Returns the amount of cursed bond stored in the contract for an\\n    /// archaeologist.\\n    /// @param archaeologist The address of the archaeologist whose\\n    /// cursed bond is being returned\\n    function getCursedBond(address archaeologist)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return s.cursedBonds[archaeologist];\\n    }\\n\\n    function getArchaeologistSuccessOnSarcophagus(\\n        address archaeologist,\\n        bytes32 sarcoId\\n    ) external view returns (bool) {\\n        return s.archaeologistSuccesses[archaeologist][sarcoId];\\n    }\\n\\n    /// @notice Returns the number of accusations for an archaeologist.\\n    /// @param archaeologist The address of the archaeologist whose accusations\\n    /// are being returned\\n    function getArchaeologistAccusals(address archaeologist)\\n        external\\n        view\\n        returns (bytes32[] memory)\\n    {\\n        return s.archaeologistAccusals[archaeologist];\\n    }\\n\\n    /// @notice Returns the number of cleanups for an archaeologist.\\n    /// @param archaeologist The address of the archaeologist whose cleanups\\n    /// are being returned\\n    function getArchaeologistCleanups(address archaeologist)\\n        external\\n        view\\n        returns (bytes32[] memory)\\n    {\\n        return s.archaeologistCleanups[archaeologist];\\n    }\\n\\n    /// @notice Returns a sarcophagus.\\n    /// @param sarcoId The identifier of the sarcophagus being returned\\n    function getSarcophagus(bytes32 sarcoId)\\n        external\\n        view\\n        returns (LibTypes.Sarcophagus memory)\\n    {\\n        return s.sarcophagi[sarcoId];\\n    }\\n\\n    /// @notice Given an embalmer's address, returns the identifiers of all\\n    /// sarcophagi that the embalmer has created.\\n    /// @param embalmer The address of the embalmer whose sarcophagi are being\\n    /// returned\\n    function getEmbalmersarcophagi(address embalmer)\\n        external\\n        view\\n        returns (bytes32[] memory)\\n    {\\n        return s.embalmerSarcophagi[embalmer];\\n    }\\n\\n    /// @notice Given an archaeologist's address, returns the identifiers of all\\n    /// sarcophagi that the archaeologist has participated in.\\n    /// @param archaeologist The address of the archaeologist whose sarcophagi\\n    /// are being returned\\n    function getArchaeologistsarcophagi(address archaeologist)\\n        external\\n        view\\n        returns (bytes32[] memory)\\n    {\\n        return s.archaeologistSarcophagi[archaeologist];\\n    }\\n\\n    /// @notice Given a recipient's address, returns the identifiers of all\\n    /// sarcophagi that the recipient has participated in.\\n    /// @param recipient The address of the recipient whose sarcophagi are being\\n    /// returned\\n    function getRecipientsarcophagi(address recipient)\\n        external\\n        view\\n        returns (bytes32[] memory)\\n    {\\n        return s.recipientSarcophagi[recipient];\\n    }\\n\\n    /// @notice Returns the data stored on a sarcophagus for an archaeologist.\\n    /// @param sarcoId The identifier of the sarcophagus whose data is being\\n    /// returned\\n    /// @param archaeologist The address of the archaeologist whose data is\\n    /// being returned\\n    function getSarcophagusArchaeologist(bytes32 sarcoId, address archaeologist)\\n        external\\n        view\\n        returns (LibTypes.ArchaeologistStorage memory)\\n    {\\n        return s.sarcophagusArchaeologists[sarcoId][archaeologist];\\n    }\\n}\\n\",\"keccak256\":\"0xc16e25c93889296d0b606cd443823886377cae20c82ae9dcc913310fe04ced29\",\"license\":\"Unlicense\"},\"contracts/libraries/LibTypes.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.13;\\n\\n/**\\n * @title A collection of defined structs\\n * @notice This library defines the various data models that the Sarcophagus\\n * system uses\\n */\\nlibrary LibTypes {\\n    // DoesNotExist must come first on the list to be the default value\\n    enum SarcophagusState {\\n        DoesNotExist,\\n        Exists,\\n        Done\\n    }\\n\\n    // A struct of just the signature. This is used primarily by the\\n    // finalizeSarcpohagus function for the arweave archaeologist. Note that,\\n    // unlike the regular archaeologists, the sarcophagus already stores the\\n    // single arweave archaeologist's address so there is no need to pass in the\\n    // address to the finalizeSarcophagus function.\\n    struct Signature {\\n        uint8 v;\\n        bytes32 r;\\n        bytes32 s;\\n    }\\n\\n    // Signature struct created to make passing in the signature argmuments into\\n    // finalizedSarcophagus easier and to avoid the \\\"stack too deep\\\" error.\\n    // Also attaching arachaeologist addresses so we can tie the signature back\\n    // to the address in finalizeSarcophagus.\\n    struct SignatureWithAccount {\\n        address account;\\n        uint8 v;\\n        bytes32 r;\\n        bytes32 s;\\n    }\\n\\n    // ArchaeologistMemory is the struct that is passed into the\\n    // initializeSarcophagus function. Even though we don't need each storage\\n    // fee of the archaeologist, the storage fee is included in the struct to\\n    // reduce the stack size within the function, preventing the \\\"stack too\\n    // deep\\\" error.\\n    struct ArchaeologistMemory {\\n        address archAddress;\\n        uint256 storageFee;\\n        uint256 diggingFee;\\n        uint256 bounty;\\n        bytes32 hashedShard;\\n    }\\n\\n    // ArchaeologistStorage is the struct that is stored in AppStorage under the\\n    // sarcophagusArchaeologists mapping.\\n    //\\n    // The archaeologist address is left out since each archaeologist's address\\n    // is stored on the sarcophagus object as an array.\\n    //\\n    // The storage fee is left out becuase we only need to store the storage fee\\n    // of the archaeologist uploading to arweave, which will be stored directly\\n    // on the sarcophagus.\\n    struct ArchaeologistStorage {\\n        uint256 diggingFee;\\n        uint256 bounty;\\n        bytes32 doubleHashedShard;\\n        bytes unencryptedShard;\\n    }\\n\\n    // The ArchaeologistStorage struct could be contained in this Sarcophagus\\n    // struct as a mapping, but it was put into it's own mapping\\n    // (sarcophagusArchaeologists) directly in AppStorage. Instead the\\n    // sarcophagus stores the addresses of each archaeologist added to it. This\\n    // was done to simplify the creation of a sarcophagus object in\\n    // initializeSarcophagus.\\n    struct Sarcophagus {\\n        string name;\\n        SarcophagusState state;\\n        bool canBeTransferred;\\n        uint8 minShards;\\n        uint256 resurrectionTime;\\n        uint256 maxResurrectionInterval;\\n        string[] arweaveTxIds;\\n        uint256 storageFee;\\n        address embalmer;\\n        address recipientAddress;\\n        address arweaveArchaeologist;\\n        address[] archaeologists;\\n    }\\n}\\n\",\"keccak256\":\"0x270a916e9f4b256a37342be7aab10069346fbb93a5954a94a2ab509e3a918274\",\"license\":\"Unlicense\"},\"contracts/storage/LibAppStorage.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../libraries/LibTypes.sol\\\";\\n\\n// Global storage for the app. Can be accessed in facets and in libraries\\nstruct AppStorage {\\n    IERC20 sarcoToken;\\n    // The amount to be taken from the embalmer each time a protocol fee should\\n    // be collected\\n    uint256 protocolFee;\\n    // The amount of protocol fees currently stored on the contract\\n    uint256 totalProtocolFees;\\n    // sarcophagi\\n    bytes32[] sarcophagusIdentifiers;\\n    // Each archaeologist's total free and cursed bonds\\n    mapping(address => uint256) freeBonds;\\n    mapping(address => uint256) cursedBonds;\\n    // archaeologist stats\\n    mapping(address => mapping(bytes32 => bool)) archaeologistSuccesses;\\n    mapping(address => bytes32[]) archaeologistCancels;\\n    mapping(address => bytes32[]) archaeologistAccusals;\\n    mapping(address => bytes32[]) archaeologistCleanups;\\n    // Track how much archaeologists have made. To be credited and debited\\n    // as archaeologists fulfil their duties and withdraw their rewards\\n    mapping(address => uint256) archaeologistRewards;\\n    mapping(bytes32 => LibTypes.Sarcophagus) sarcophagi;\\n    // sarcophagus ownerships\\n    mapping(address => bytes32[]) embalmerSarcophagi;\\n    mapping(address => bytes32[]) archaeologistSarcophagi;\\n    mapping(address => bytes32[]) recipientSarcophagi;\\n    // Mapping of unencrypted shard double hashes to archaeologists who are\\n    // responsible for them. Needed to optimise Accuse algo - unencrypted shard is\\n    // double hashed and used as a constant O(1) lookup here\\n    mapping(bytes32 => address) doubleHashedShardArchaeologists;\\n    // A mapping used to store an archaeologist's data on a sarcophagus.\\n    // Bounty, digging fees, storage fees, and the hashed shards of the\\n    // archaeologists all need to be stored per sarcophagus. This mapping of a\\n    // mapping stores the archaeologist's data we need per sarcophagus.\\n    // Example usage (to retrieve the bounty an archaeologist may claim on some sarcophagus):\\n    //   LibTypes.ArchaeologistStorage bondedArchaeologist = sarcophagusArchaeologists[sarcoId][archAddress];\\n    //   uint256 bounty = bondedArchaeologist.bounty;\\n    mapping(bytes32 => mapping(address => LibTypes.ArchaeologistStorage)) sarcophagusArchaeologists;\\n}\\n\\nlibrary LibAppStorage {\\n    function getAppStorage() internal pure returns (AppStorage storage s) {\\n        // Set the position of our struct in contract storage\\n        // Since AppStorage s is the first and only state variable declared in\\n        // facets its position in contract storage is 0\\n        assembly {\\n            s.slot := 0\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x367d92e27c7e659b0700d9b43046571d4a3f3942336070687d81b302385dd4cf\",\"license\":\"Unlicense\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061156f806100206000396000f3fe608060405234801561001057600080fd5b50600436106100ce5760003560e01c80638ea52bb21161008c578063b7688b7c11610066578063b7688b7c1461025f578063dc231f431461028f578063de116f06146102bf578063f1a03938146102ef576100ce565b80638ea52bb2146101f35780638fbd55d2146102115780639c54563914610241576100ce565b806280357f146100d35780636ba5c8ef146101035780637819551b1461013357806378b4170614610163578063873e31fa1461019357806387927ce6146101c3575b600080fd5b6100ed60048036038101906100e89190610da7565b61031f565b6040516100fa9190610e9c565b60405180910390f35b61011d60048036038101906101189190610eea565b6103b9565b60405161012a9190610f45565b60405180910390f35b61014d60048036038101906101489190610da7565b610423565b60405161015a9190610e9c565b60405180910390f35b61017d60048036038101906101789190610da7565b6104bd565b60405161018a9190610e9c565b60405180910390f35b6101ad60048036038101906101a89190610da7565b610557565b6040516101ba9190610f79565b60405180910390f35b6101dd60048036038101906101d89190610da7565b6105a2565b6040516101ea9190610f79565b60405180910390f35b6101fb6105ed565b6040516102089190610f79565b60405180910390f35b61022b60048036038101906102269190610da7565b6105f9565b6040516102389190610f79565b60405180910390f35b610249610644565b6040516102569190610f79565b60405180910390f35b61027960048036038101906102749190610da7565b610650565b6040516102869190610e9c565b60405180910390f35b6102a960048036038101906102a49190610f94565b6106ea565b6040516102b691906110df565b60405180910390f35b6102d960048036038101906102d49190611101565b610808565b6040516102e691906114b7565b60405180910390f35b61030960048036038101906103049190610da7565b610bc5565b6040516103169190610e9c565b60405180910390f35b60606000600e0160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208054806020026020016040519081016040528092919081815260200182805480156103ad57602002820191906000526020600020905b815481526020019060010190808311610399575b50505050509050919050565b60008060060160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002060009054906101000a900460ff16905092915050565b6060600060090160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208054806020026020016040519081016040528092919081815260200182805480156104b157602002820191906000526020600020905b81548152602001906001019080831161049d575b50505050509050919050565b60606000600c0160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080548060200260200160405190810160405280929190818152602001828054801561054b57602002820191906000526020600020905b815481526020019060010190808311610537575b50505050509050919050565b600080600a0160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60008060050160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60008060010154905090565b60008060040160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60008060020154905090565b60606000600d0160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208054806020026020016040519081016040528092919081815260200182805480156106de57602002820191906000526020600020905b8154815260200190600101908083116106ca575b50505050509050919050565b6106f2610c5f565b6000601001600084815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060405180608001604052908160008201548152602001600182015481526020016002820154815260200160038201805461077e90611508565b80601f01602080910402602001604051908101604052809291908181526020018280546107aa90611508565b80156107f75780601f106107cc576101008083540402835291602001916107f7565b820191906000526020600020905b8154815290600101906020018083116107da57829003601f168201915b505050505081525050905092915050565b610810610c8a565b6000600b0160008381526020019081526020016000206040518061018001604052908160008201805461084290611508565b80601f016020809104026020016040519081016040528092919081815260200182805461086e90611508565b80156108bb5780601f10610890576101008083540402835291602001916108bb565b820191906000526020600020905b81548152906001019060200180831161089e57829003601f168201915b505050505081526020016001820160009054906101000a900460ff1660028111156108e9576108e8611183565b5b60028111156108fb576108fa611183565b5b81526020016001820160019054906101000a900460ff161515151581526020016001820160029054906101000a900460ff1660ff1660ff168152602001600282015481526020016003820154815260200160048201805480602002602001604051908101604052809291908181526020016000905b82821015610a1c57838290600052602060002001805461098f90611508565b80601f01602080910402602001604051908101604052809291908181526020018280546109bb90611508565b8015610a085780601f106109dd57610100808354040283529160200191610a08565b820191906000526020600020905b8154815290600101906020018083116109eb57829003601f168201915b505050505081526020019060010190610970565b505050508152602001600582015481526020016006820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016007820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016008820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160098201805480602002602001604051908101604052809291908181526020018280548015610bb557602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610b6b575b5050505050815250509050919050565b6060600060080160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805480602002602001604051908101604052809291908181526020018280548015610c5357602002820191906000526020600020905b815481526020019060010190808311610c3f575b50505050509050919050565b6040518060800160405280600081526020016000815260200160008019168152602001606081525090565b6040518061018001604052806060815260200160006002811115610cb157610cb0611183565b5b8152602001600015158152602001600060ff16815260200160008152602001600081526020016060815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001606081525090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610d7482610d49565b9050919050565b610d8481610d69565b8114610d8f57600080fd5b50565b600081359050610da181610d7b565b92915050565b600060208284031215610dbd57610dbc610d44565b5b6000610dcb84828501610d92565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6000819050919050565b610e1381610e00565b82525050565b6000610e258383610e0a565b60208301905092915050565b6000602082019050919050565b6000610e4982610dd4565b610e538185610ddf565b9350610e5e83610df0565b8060005b83811015610e8f578151610e768882610e19565b9750610e8183610e31565b925050600181019050610e62565b5085935050505092915050565b60006020820190508181036000830152610eb68184610e3e565b905092915050565b610ec781610e00565b8114610ed257600080fd5b50565b600081359050610ee481610ebe565b92915050565b60008060408385031215610f0157610f00610d44565b5b6000610f0f85828601610d92565b9250506020610f2085828601610ed5565b9150509250929050565b60008115159050919050565b610f3f81610f2a565b82525050565b6000602082019050610f5a6000830184610f36565b92915050565b6000819050919050565b610f7381610f60565b82525050565b6000602082019050610f8e6000830184610f6a565b92915050565b60008060408385031215610fab57610faa610d44565b5b6000610fb985828601610ed5565b9250506020610fca85828601610d92565b9150509250929050565b610fdd81610f60565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561101d578082015181840152602081019050611002565b8381111561102c576000848401525b50505050565b6000601f19601f8301169050919050565b600061104e82610fe3565b6110588185610fee565b9350611068818560208601610fff565b61107181611032565b840191505092915050565b60006080830160008301516110946000860182610fd4565b5060208301516110a76020860182610fd4565b5060408301516110ba6040860182610e0a565b50606083015184820360608601526110d28282611043565b9150508091505092915050565b600060208201905081810360008301526110f9818461107c565b905092915050565b60006020828403121561111757611116610d44565b5b600061112584828501610ed5565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60006111558261112e565b61115f8185611139565b935061116f818560208601610fff565b61117881611032565b840191505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600381106111c3576111c2611183565b5b50565b60008190506111d4826111b2565b919050565b60006111e4826111c6565b9050919050565b6111f4816111d9565b82525050565b61120381610f2a565b82525050565b600060ff82169050919050565b61121f81611209565b82525050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600061125d838361114a565b905092915050565b6000602082019050919050565b600061127d82611225565b6112878185611230565b93508360208202850161129985611241565b8060005b858110156112d557848403895281516112b68582611251565b94506112c183611265565b925060208a0199505060018101905061129d565b50829750879550505050505092915050565b6112f081610d69565b82525050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600061132e83836112e7565b60208301905092915050565b6000602082019050919050565b6000611352826112f6565b61135c8185611301565b935061136783611312565b8060005b8381101561139857815161137f8882611322565b975061138a8361133a565b92505060018101905061136b565b5085935050505092915050565b60006101808301600083015184820360008601526113c3828261114a565b91505060208301516113d860208601826111eb565b5060408301516113eb60408601826111fa565b5060608301516113fe6060860182611216565b5060808301516114116080860182610fd4565b5060a083015161142460a0860182610fd4565b5060c083015184820360c086015261143c8282611272565b91505060e083015161145160e0860182610fd4565b506101008301516114666101008601826112e7565b5061012083015161147b6101208601826112e7565b506101408301516114906101408601826112e7565b506101608301518482036101608601526114aa8282611347565b9150508091505092915050565b600060208201905081810360008301526114d181846113a5565b905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061152057607f821691505b602082108103611533576115326114d9565b5b5091905056fea2646970667358221220abba8d467da9f65656355cd9603529a0efb5baa6b893348f7c19f333cc6f707f64736f6c634300080d0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100ce5760003560e01c80638ea52bb21161008c578063b7688b7c11610066578063b7688b7c1461025f578063dc231f431461028f578063de116f06146102bf578063f1a03938146102ef576100ce565b80638ea52bb2146101f35780638fbd55d2146102115780639c54563914610241576100ce565b806280357f146100d35780636ba5c8ef146101035780637819551b1461013357806378b4170614610163578063873e31fa1461019357806387927ce6146101c3575b600080fd5b6100ed60048036038101906100e89190610da7565b61031f565b6040516100fa9190610e9c565b60405180910390f35b61011d60048036038101906101189190610eea565b6103b9565b60405161012a9190610f45565b60405180910390f35b61014d60048036038101906101489190610da7565b610423565b60405161015a9190610e9c565b60405180910390f35b61017d60048036038101906101789190610da7565b6104bd565b60405161018a9190610e9c565b60405180910390f35b6101ad60048036038101906101a89190610da7565b610557565b6040516101ba9190610f79565b60405180910390f35b6101dd60048036038101906101d89190610da7565b6105a2565b6040516101ea9190610f79565b60405180910390f35b6101fb6105ed565b6040516102089190610f79565b60405180910390f35b61022b60048036038101906102269190610da7565b6105f9565b6040516102389190610f79565b60405180910390f35b610249610644565b6040516102569190610f79565b60405180910390f35b61027960048036038101906102749190610da7565b610650565b6040516102869190610e9c565b60405180910390f35b6102a960048036038101906102a49190610f94565b6106ea565b6040516102b691906110df565b60405180910390f35b6102d960048036038101906102d49190611101565b610808565b6040516102e691906114b7565b60405180910390f35b61030960048036038101906103049190610da7565b610bc5565b6040516103169190610e9c565b60405180910390f35b60606000600e0160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208054806020026020016040519081016040528092919081815260200182805480156103ad57602002820191906000526020600020905b815481526020019060010190808311610399575b50505050509050919050565b60008060060160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002060009054906101000a900460ff16905092915050565b6060600060090160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208054806020026020016040519081016040528092919081815260200182805480156104b157602002820191906000526020600020905b81548152602001906001019080831161049d575b50505050509050919050565b60606000600c0160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080548060200260200160405190810160405280929190818152602001828054801561054b57602002820191906000526020600020905b815481526020019060010190808311610537575b50505050509050919050565b600080600a0160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60008060050160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60008060010154905090565b60008060040160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60008060020154905090565b60606000600d0160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208054806020026020016040519081016040528092919081815260200182805480156106de57602002820191906000526020600020905b8154815260200190600101908083116106ca575b50505050509050919050565b6106f2610c5f565b6000601001600084815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060405180608001604052908160008201548152602001600182015481526020016002820154815260200160038201805461077e90611508565b80601f01602080910402602001604051908101604052809291908181526020018280546107aa90611508565b80156107f75780601f106107cc576101008083540402835291602001916107f7565b820191906000526020600020905b8154815290600101906020018083116107da57829003601f168201915b505050505081525050905092915050565b610810610c8a565b6000600b0160008381526020019081526020016000206040518061018001604052908160008201805461084290611508565b80601f016020809104026020016040519081016040528092919081815260200182805461086e90611508565b80156108bb5780601f10610890576101008083540402835291602001916108bb565b820191906000526020600020905b81548152906001019060200180831161089e57829003601f168201915b505050505081526020016001820160009054906101000a900460ff1660028111156108e9576108e8611183565b5b60028111156108fb576108fa611183565b5b81526020016001820160019054906101000a900460ff161515151581526020016001820160029054906101000a900460ff1660ff1660ff168152602001600282015481526020016003820154815260200160048201805480602002602001604051908101604052809291908181526020016000905b82821015610a1c57838290600052602060002001805461098f90611508565b80601f01602080910402602001604051908101604052809291908181526020018280546109bb90611508565b8015610a085780601f106109dd57610100808354040283529160200191610a08565b820191906000526020600020905b8154815290600101906020018083116109eb57829003601f168201915b505050505081526020019060010190610970565b505050508152602001600582015481526020016006820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016007820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016008820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160098201805480602002602001604051908101604052809291908181526020018280548015610bb557602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610b6b575b5050505050815250509050919050565b6060600060080160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805480602002602001604051908101604052809291908181526020018280548015610c5357602002820191906000526020600020905b815481526020019060010190808311610c3f575b50505050509050919050565b6040518060800160405280600081526020016000815260200160008019168152602001606081525090565b6040518061018001604052806060815260200160006002811115610cb157610cb0611183565b5b8152602001600015158152602001600060ff16815260200160008152602001600081526020016060815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001606081525090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610d7482610d49565b9050919050565b610d8481610d69565b8114610d8f57600080fd5b50565b600081359050610da181610d7b565b92915050565b600060208284031215610dbd57610dbc610d44565b5b6000610dcb84828501610d92565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6000819050919050565b610e1381610e00565b82525050565b6000610e258383610e0a565b60208301905092915050565b6000602082019050919050565b6000610e4982610dd4565b610e538185610ddf565b9350610e5e83610df0565b8060005b83811015610e8f578151610e768882610e19565b9750610e8183610e31565b925050600181019050610e62565b5085935050505092915050565b60006020820190508181036000830152610eb68184610e3e565b905092915050565b610ec781610e00565b8114610ed257600080fd5b50565b600081359050610ee481610ebe565b92915050565b60008060408385031215610f0157610f00610d44565b5b6000610f0f85828601610d92565b9250506020610f2085828601610ed5565b9150509250929050565b60008115159050919050565b610f3f81610f2a565b82525050565b6000602082019050610f5a6000830184610f36565b92915050565b6000819050919050565b610f7381610f60565b82525050565b6000602082019050610f8e6000830184610f6a565b92915050565b60008060408385031215610fab57610faa610d44565b5b6000610fb985828601610ed5565b9250506020610fca85828601610d92565b9150509250929050565b610fdd81610f60565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561101d578082015181840152602081019050611002565b8381111561102c576000848401525b50505050565b6000601f19601f8301169050919050565b600061104e82610fe3565b6110588185610fee565b9350611068818560208601610fff565b61107181611032565b840191505092915050565b60006080830160008301516110946000860182610fd4565b5060208301516110a76020860182610fd4565b5060408301516110ba6040860182610e0a565b50606083015184820360608601526110d28282611043565b9150508091505092915050565b600060208201905081810360008301526110f9818461107c565b905092915050565b60006020828403121561111757611116610d44565b5b600061112584828501610ed5565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60006111558261112e565b61115f8185611139565b935061116f818560208601610fff565b61117881611032565b840191505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600381106111c3576111c2611183565b5b50565b60008190506111d4826111b2565b919050565b60006111e4826111c6565b9050919050565b6111f4816111d9565b82525050565b61120381610f2a565b82525050565b600060ff82169050919050565b61121f81611209565b82525050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600061125d838361114a565b905092915050565b6000602082019050919050565b600061127d82611225565b6112878185611230565b93508360208202850161129985611241565b8060005b858110156112d557848403895281516112b68582611251565b94506112c183611265565b925060208a0199505060018101905061129d565b50829750879550505050505092915050565b6112f081610d69565b82525050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600061132e83836112e7565b60208301905092915050565b6000602082019050919050565b6000611352826112f6565b61135c8185611301565b935061136783611312565b8060005b8381101561139857815161137f8882611322565b975061138a8361133a565b92505060018101905061136b565b5085935050505092915050565b60006101808301600083015184820360008601526113c3828261114a565b91505060208301516113d860208601826111eb565b5060408301516113eb60408601826111fa565b5060608301516113fe6060860182611216565b5060808301516114116080860182610fd4565b5060a083015161142460a0860182610fd4565b5060c083015184820360c086015261143c8282611272565b91505060e083015161145160e0860182610fd4565b506101008301516114666101008601826112e7565b5061012083015161147b6101208601826112e7565b506101408301516114906101408601826112e7565b506101608301518482036101608601526114aa8282611347565b9150508091505092915050565b600060208201905081810360008301526114d181846113a5565b905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061152057607f821691505b602082108103611533576115326114d9565b5b5091905056fea2646970667358221220abba8d467da9f65656355cd9603529a0efb5baa6b893348f7c19f333cc6f707f64736f6c634300080d0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getArchaeologistAccusals(address)": {
        "params": {
          "archaeologist": "The address of the archaeologist whose accusations are being returned"
        }
      },
      "getArchaeologistCleanups(address)": {
        "params": {
          "archaeologist": "The address of the archaeologist whose cleanups are being returned"
        }
      },
      "getArchaeologistsarcophagi(address)": {
        "params": {
          "archaeologist": "The address of the archaeologist whose sarcophagi are being returned"
        }
      },
      "getAvailableRewards(address)": {
        "params": {
          "archaeologist": "The address of the archaeologist whose reward is being returned"
        }
      },
      "getCursedBond(address)": {
        "params": {
          "archaeologist": "The address of the archaeologist whose cursed bond is being returned"
        }
      },
      "getEmbalmersarcophagi(address)": {
        "params": {
          "embalmer": "The address of the embalmer whose sarcophagi are being returned"
        }
      },
      "getFreeBond(address)": {
        "params": {
          "archaeologist": "The address of the archaeologist whose free bond is being returned"
        }
      },
      "getProtocolFeeAmount()": {
        "returns": {
          "_0": "The protocol fee amount"
        }
      },
      "getRecipientsarcophagi(address)": {
        "params": {
          "recipient": "The address of the recipient whose sarcophagi are being returned"
        }
      },
      "getSarcophagus(bytes32)": {
        "params": {
          "sarcoId": "The identifier of the sarcophagus being returned"
        }
      },
      "getSarcophagusArchaeologist(bytes32,address)": {
        "params": {
          "archaeologist": "The address of the archaeologist whose data is being returned",
          "sarcoId": "The identifier of the sarcophagus whose data is being returned"
        }
      },
      "getTotalProtocolFees()": {
        "returns": {
          "_0": "The total protocol fees"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getArchaeologistAccusals(address)": {
        "notice": "Returns the number of accusations for an archaeologist."
      },
      "getArchaeologistCleanups(address)": {
        "notice": "Returns the number of cleanups for an archaeologist."
      },
      "getArchaeologistsarcophagi(address)": {
        "notice": "Given an archaeologist's address, returns the identifiers of all sarcophagi that the archaeologist has participated in."
      },
      "getAvailableRewards(address)": {
        "notice": "Returns the amount of rewards stored in the contract for an archaeologist."
      },
      "getCursedBond(address)": {
        "notice": "Returns the amount of cursed bond stored in the contract for an archaeologist."
      },
      "getEmbalmersarcophagi(address)": {
        "notice": "Given an embalmer's address, returns the identifiers of all sarcophagi that the embalmer has created."
      },
      "getFreeBond(address)": {
        "notice": "Returns the amount of free bond stored in the contract for an archaeologist."
      },
      "getProtocolFeeAmount()": {
        "notice": "Get the protocol fee amount from the contract."
      },
      "getRecipientsarcophagi(address)": {
        "notice": "Given a recipient's address, returns the identifiers of all sarcophagi that the recipient has participated in."
      },
      "getSarcophagus(bytes32)": {
        "notice": "Returns a sarcophagus."
      },
      "getSarcophagusArchaeologist(bytes32,address)": {
        "notice": "Returns the data stored on a sarcophagus for an archaeologist."
      },
      "getTotalProtocolFees()": {
        "notice": "Gets the total protocol fees from the contract."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 85,
        "contract": "contracts/facets/ViewStateFacet.sol:ViewStateFacet",
        "label": "s",
        "offset": 0,
        "slot": "0",
        "type": "t_struct(AppStorage)459_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_string_storage)dyn_storage": {
        "base": "t_string_storage",
        "encoding": "dynamic_array",
        "label": "string[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20)77": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_enum(SarcophagusState)281": {
        "encoding": "inplace",
        "label": "enum LibTypes.SarcophagusState",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_array(t_bytes32)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bytes32[])",
        "numberOfBytes": "32",
        "value": "t_array(t_bytes32)dyn_storage"
      },
      "t_mapping(t_address,t_mapping(t_bytes32,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(bytes32 => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bytes32,t_bool)"
      },
      "t_mapping(t_address,t_struct(ArchaeologistStorage)317_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct LibTypes.ArchaeologistStorage)",
        "numberOfBytes": "32",
        "value": "t_struct(ArchaeologistStorage)317_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_address)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_mapping(t_address,t_struct(ArchaeologistStorage)317_storage))": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => mapping(address => struct LibTypes.ArchaeologistStorage))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(ArchaeologistStorage)317_storage)"
      },
      "t_mapping(t_bytes32,t_struct(Sarcophagus)345_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct LibTypes.Sarcophagus)",
        "numberOfBytes": "32",
        "value": "t_struct(Sarcophagus)345_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AppStorage)459_storage": {
        "encoding": "inplace",
        "label": "struct AppStorage",
        "members": [
          {
            "astId": 387,
            "contract": "contracts/facets/ViewStateFacet.sol:ViewStateFacet",
            "label": "sarcoToken",
            "offset": 0,
            "slot": "0",
            "type": "t_contract(IERC20)77"
          },
          {
            "astId": 389,
            "contract": "contracts/facets/ViewStateFacet.sol:ViewStateFacet",
            "label": "protocolFee",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 391,
            "contract": "contracts/facets/ViewStateFacet.sol:ViewStateFacet",
            "label": "totalProtocolFees",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 394,
            "contract": "contracts/facets/ViewStateFacet.sol:ViewStateFacet",
            "label": "sarcophagusIdentifiers",
            "offset": 0,
            "slot": "3",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 398,
            "contract": "contracts/facets/ViewStateFacet.sol:ViewStateFacet",
            "label": "freeBonds",
            "offset": 0,
            "slot": "4",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 402,
            "contract": "contracts/facets/ViewStateFacet.sol:ViewStateFacet",
            "label": "cursedBonds",
            "offset": 0,
            "slot": "5",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 408,
            "contract": "contracts/facets/ViewStateFacet.sol:ViewStateFacet",
            "label": "archaeologistSuccesses",
            "offset": 0,
            "slot": "6",
            "type": "t_mapping(t_address,t_mapping(t_bytes32,t_bool))"
          },
          {
            "astId": 413,
            "contract": "contracts/facets/ViewStateFacet.sol:ViewStateFacet",
            "label": "archaeologistCancels",
            "offset": 0,
            "slot": "7",
            "type": "t_mapping(t_address,t_array(t_bytes32)dyn_storage)"
          },
          {
            "astId": 418,
            "contract": "contracts/facets/ViewStateFacet.sol:ViewStateFacet",
            "label": "archaeologistAccusals",
            "offset": 0,
            "slot": "8",
            "type": "t_mapping(t_address,t_array(t_bytes32)dyn_storage)"
          },
          {
            "astId": 423,
            "contract": "contracts/facets/ViewStateFacet.sol:ViewStateFacet",
            "label": "archaeologistCleanups",
            "offset": 0,
            "slot": "9",
            "type": "t_mapping(t_address,t_array(t_bytes32)dyn_storage)"
          },
          {
            "astId": 427,
            "contract": "contracts/facets/ViewStateFacet.sol:ViewStateFacet",
            "label": "archaeologistRewards",
            "offset": 0,
            "slot": "10",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 432,
            "contract": "contracts/facets/ViewStateFacet.sol:ViewStateFacet",
            "label": "sarcophagi",
            "offset": 0,
            "slot": "11",
            "type": "t_mapping(t_bytes32,t_struct(Sarcophagus)345_storage)"
          },
          {
            "astId": 437,
            "contract": "contracts/facets/ViewStateFacet.sol:ViewStateFacet",
            "label": "embalmerSarcophagi",
            "offset": 0,
            "slot": "12",
            "type": "t_mapping(t_address,t_array(t_bytes32)dyn_storage)"
          },
          {
            "astId": 442,
            "contract": "contracts/facets/ViewStateFacet.sol:ViewStateFacet",
            "label": "archaeologistSarcophagi",
            "offset": 0,
            "slot": "13",
            "type": "t_mapping(t_address,t_array(t_bytes32)dyn_storage)"
          },
          {
            "astId": 447,
            "contract": "contracts/facets/ViewStateFacet.sol:ViewStateFacet",
            "label": "recipientSarcophagi",
            "offset": 0,
            "slot": "14",
            "type": "t_mapping(t_address,t_array(t_bytes32)dyn_storage)"
          },
          {
            "astId": 451,
            "contract": "contracts/facets/ViewStateFacet.sol:ViewStateFacet",
            "label": "doubleHashedShardArchaeologists",
            "offset": 0,
            "slot": "15",
            "type": "t_mapping(t_bytes32,t_address)"
          },
          {
            "astId": 458,
            "contract": "contracts/facets/ViewStateFacet.sol:ViewStateFacet",
            "label": "sarcophagusArchaeologists",
            "offset": 0,
            "slot": "16",
            "type": "t_mapping(t_bytes32,t_mapping(t_address,t_struct(ArchaeologistStorage)317_storage))"
          }
        ],
        "numberOfBytes": "544"
      },
      "t_struct(ArchaeologistStorage)317_storage": {
        "encoding": "inplace",
        "label": "struct LibTypes.ArchaeologistStorage",
        "members": [
          {
            "astId": 310,
            "contract": "contracts/facets/ViewStateFacet.sol:ViewStateFacet",
            "label": "diggingFee",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 312,
            "contract": "contracts/facets/ViewStateFacet.sol:ViewStateFacet",
            "label": "bounty",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 314,
            "contract": "contracts/facets/ViewStateFacet.sol:ViewStateFacet",
            "label": "doubleHashedShard",
            "offset": 0,
            "slot": "2",
            "type": "t_bytes32"
          },
          {
            "astId": 316,
            "contract": "contracts/facets/ViewStateFacet.sol:ViewStateFacet",
            "label": "unencryptedShard",
            "offset": 0,
            "slot": "3",
            "type": "t_bytes_storage"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(Sarcophagus)345_storage": {
        "encoding": "inplace",
        "label": "struct LibTypes.Sarcophagus",
        "members": [
          {
            "astId": 319,
            "contract": "contracts/facets/ViewStateFacet.sol:ViewStateFacet",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 322,
            "contract": "contracts/facets/ViewStateFacet.sol:ViewStateFacet",
            "label": "state",
            "offset": 0,
            "slot": "1",
            "type": "t_enum(SarcophagusState)281"
          },
          {
            "astId": 324,
            "contract": "contracts/facets/ViewStateFacet.sol:ViewStateFacet",
            "label": "canBeTransferred",
            "offset": 1,
            "slot": "1",
            "type": "t_bool"
          },
          {
            "astId": 326,
            "contract": "contracts/facets/ViewStateFacet.sol:ViewStateFacet",
            "label": "minShards",
            "offset": 2,
            "slot": "1",
            "type": "t_uint8"
          },
          {
            "astId": 328,
            "contract": "contracts/facets/ViewStateFacet.sol:ViewStateFacet",
            "label": "resurrectionTime",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 330,
            "contract": "contracts/facets/ViewStateFacet.sol:ViewStateFacet",
            "label": "maxResurrectionInterval",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 333,
            "contract": "contracts/facets/ViewStateFacet.sol:ViewStateFacet",
            "label": "arweaveTxIds",
            "offset": 0,
            "slot": "4",
            "type": "t_array(t_string_storage)dyn_storage"
          },
          {
            "astId": 335,
            "contract": "contracts/facets/ViewStateFacet.sol:ViewStateFacet",
            "label": "storageFee",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 337,
            "contract": "contracts/facets/ViewStateFacet.sol:ViewStateFacet",
            "label": "embalmer",
            "offset": 0,
            "slot": "6",
            "type": "t_address"
          },
          {
            "astId": 339,
            "contract": "contracts/facets/ViewStateFacet.sol:ViewStateFacet",
            "label": "recipientAddress",
            "offset": 0,
            "slot": "7",
            "type": "t_address"
          },
          {
            "astId": 341,
            "contract": "contracts/facets/ViewStateFacet.sol:ViewStateFacet",
            "label": "arweaveArchaeologist",
            "offset": 0,
            "slot": "8",
            "type": "t_address"
          },
          {
            "astId": 344,
            "contract": "contracts/facets/ViewStateFacet.sol:ViewStateFacet",
            "label": "archaeologists",
            "offset": 0,
            "slot": "9",
            "type": "t_array(t_address)dyn_storage"
          }
        ],
        "numberOfBytes": "320"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}